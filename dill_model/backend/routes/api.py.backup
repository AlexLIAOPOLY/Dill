from flask import Blueprint, request, jsonify, Response
from ..models import DillModel, get_model_by_name
from ..utils import validate_input, validate_enhanced_input, validate_car_input, format_response, NumpyEncoder
import json
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from io import BytesIO
import base64
from backend.models import EnhancedDillModel
import traceback, datetime
import time

# 全局日志存储
calculation_logs = []

def add_log_entry(log_type, model_type, message, timestamp=None, dimension=None, details=None):
    """添加增强的日志条目"""
    if timestamp is None:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    log_entry = {
        'timestamp': timestamp,
        'type': log_type,  # 'info', 'progress', 'success', 'warning', 'error'
        'model': model_type,  # 'dill', 'enhanced_dill', 'car', 'system'
        'message': message,
        'dimension': dimension,  # '1d', '2d', '3d' 或 None
        'details': details or ''  # 详细信息
    }
    
    calculation_logs.append(log_entry)
    
    # 保持日志条目数量在合理范围内（最多1000条）
    if len(calculation_logs) > 1000:
        calculation_logs.pop(0)

def add_dimension_log(log_type, model_type, message, dimension, details=None):
    """添加带维度信息的日志条目"""
    add_log_entry(log_type, model_type, f"[{dimension.upper()}] {message}", dimension=dimension, details=details)

def add_progress_log(model_type, message, progress_percent=None, dimension=None):
    """添加进度日志"""
    if progress_percent is not None:
        message = f"{message} ({progress_percent}%)"
    add_log_entry('progress', model_type, message, dimension=dimension)

def add_success_log(model_type, message, dimension=None, details=None):
    """添加成功日志"""
    add_log_entry('success', model_type, message, dimension=dimension, details=details)

def add_warning_log(model_type, message, dimension=None, details=None):
    """添加警告日志"""
    add_log_entry('warning', model_type, message, dimension=dimension, details=details)

def add_error_log(model_type, message, dimension=None, details=None):
    """添加错误日志"""
    add_log_entry('error', model_type, message, dimension=dimension, details=details)

def clear_logs():
    """清空日志"""
    global calculation_logs
    calculation_logs = []

# 创建API蓝图
api_bp = Blueprint('api', __name__, url_prefix='/api')

# 实例化Dill模型
dill_model = DillModel()

@api_bp.route('/calculate', methods=['POST'])
def calculate():
    """
    计算模型并返回图像
    新增参数: model_type, sine_type (支持'1d', 'multi', '3d')
    """
    try:
        data = request.get_json()
        print('收到前端参数:', data)  # 调试用
        model_type = data.get('model_type', 'dill')
        model = get_model_by_name(model_type)
        
        # 根据模型类型验证参数
        if model_type == 'dill':
            is_valid, message = validate_input(data)
            if not is_valid:
                print(f"参数校验失败: {message}, 参数: {data}")
                return jsonify(format_response(False, message=message)), 400
            # 提取参数
            I_avg = float(data['I_avg'])
            V = float(data['V'])
            t_exp = float(data['t_exp'])
            C = float(data['C'])
            sine_type = data.get('sine_type', '1d')
            
            if sine_type == 'multi':
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                phi_expr = data.get('phi_expr', '0')
                # 获取y范围参数
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                y_points = int(data.get('y_points', 100))
                
                # 新增校验: 确保 y_min < y_max 且 y_points > 1
                if y_min >= y_max:
                    return jsonify(format_response(False, message_zh="Y轴范围最小值必须小于最大值", message_en="Y-axis range min must be less than max")), 400
                if y_points <= 1:
                    return jsonify(format_response(False, message_zh="Y轴点数必须大于1才能进行二维计算", message_en="Number of Y-axis points must be greater than 1 for 2D calculation")), 400
                
                # 如果校验通过，则直接计算y_range
                y_range = np.linspace(y_min, y_max, y_points).tolist()
                plot_data = model.generate_plots(I_avg, V, None, t_exp, C, sine_type=sine_type, 
                                               Kx=Kx, Ky=Ky, phi_expr=phi_expr, y_range=y_range)
            elif sine_type == '3d':
                # 处理三维正弦波参数
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                Kz = float(data.get('Kz', 0))
                phi_expr = data.get('phi_expr', '0')
                # 获取三维范围参数
                x_min = float(data.get('x_min', 0))
                x_max = float(data.get('x_max', 10))
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                z_min = float(data.get('z_min', 0))
                z_max = float(data.get('z_max', 10))
                
                # 默认使用50个点
                y_range = np.linspace(y_min, y_max, 50).tolist() if y_min < y_max else None
                z_range = np.linspace(z_min, z_max, 50).tolist() if z_min < z_max else None
                
                plots = model.generate_plots(I_avg, V, None, t_exp, C, sine_type=sine_type,
                                           Kx=Kx, Ky=Ky, Kz=Kz, phi_expr=phi_expr,
                                           y_range=y_range, z_range=z_range)
            else:
                K = float(data['K'])
                plots = model.generate_plots(I_avg, V, K, t_exp, C, sine_type=sine_type)
        elif model_type == 'enhanced_dill':
            is_valid, message = validate_enhanced_input(data)
            if not is_valid:
                print(f"参数校验失败: {message}, 参数: {data}")
                return jsonify(format_response(False, message=message)), 400
            z_h = float(data['z_h'])
            T = float(data['T'])
            t_B = float(data['t_B'])
            I0 = float(data.get('I0', 1.0))
            M0 = float(data.get('M0', 1.0))
            t_exp = float(data['t_exp'])
            sine_type = data.get('sine_type', '1d')
            
            if sine_type == 'multi':
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                phi_expr = data.get('phi_expr', '0')
                V = float(data.get('V', 0))
                plots = model.generate_plots(z_h, T, t_B, I0, M0, t_exp, 
                                          sine_type=sine_type, Kx=Kx, Ky=Ky, phi_expr=phi_expr, V=V)
            elif sine_type == '3d':
                # 处理三维正弦波参数
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                Kz = float(data.get('Kz', 0))
                phi_expr = data.get('phi_expr', '0')
                
                # 获取三维范围参数
                x_min = float(data.get('x_min', 0))
                x_max = float(data.get('x_max', 10))
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                z_min = float(data.get('z_min', 0))
                z_max = float(data.get('z_max', 10))
                
                # 默认使用50个点
                y_range = np.linspace(y_min, y_max, 50).tolist() if y_min < y_max else None
                z_range = np.linspace(z_min, z_max, 50).tolist() if z_min < z_max else None
                
                plots = model.generate_plots(z_h, T, t_B, I0, M0, t_exp, 
                                          sine_type=sine_type, Kx=Kx, Ky=Ky, Kz=Kz,
                                          phi_expr=phi_expr, V=V, y_range=y_range, z_range=z_range)
            else:
                plots = model.generate_plots(z_h, T, t_B, I0, M0, t_exp, sine_type=sine_type)
        elif model_type == 'car':
            is_valid, message = validate_car_input(data)
            if not is_valid:
                print(f"参数校验失败: {message}, 参数: {data}")
                return jsonify(format_response(False, message=message)), 400
            I_avg = float(data['I_avg'])
            V = float(data['V'])
            t_exp = float(data['t_exp'])
            acid_gen_efficiency = float(data['acid_gen_efficiency'])
            diffusion_length = float(data['diffusion_length'])
            reaction_rate = float(data['reaction_rate'])
            amplification = float(data['amplification'])
            contrast = float(data['contrast'])
            sine_type = data.get('sine_type', '1d')
            
            if sine_type == 'multi':
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                phi_expr = data.get('phi_expr', '0')
                # 为CAR模型添加y_range参数处理
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                y_points = int(data.get('y_points', 100))
                
                if y_min >= y_max:
                    return jsonify(format_response(False, message_zh="Y轴范围最小值必须小于最大值", message_en="Y-axis range min must be less than max")), 400
                if y_points <= 1:
                    return jsonify(format_response(False, message_zh="Y轴点数必须大于1才能进行二维计算", message_en="Number of Y-axis points must be greater than 1 for 2D calculation")), 400
                
                y_range = np.linspace(y_min, y_max, y_points).tolist()
                plot_data = model.generate_plots(I_avg, V, None, t_exp, acid_gen_efficiency, 
                                         diffusion_length, reaction_rate, amplification, contrast, 
                                         sine_type=sine_type, Kx=Kx, Ky=Ky, phi_expr=phi_expr, y_range=y_range)
            elif sine_type == '3d':
                # 处理三维正弦波参数
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                Kz = float(data.get('Kz', 0))
                phi_expr = data.get('phi_expr', '0')
                
                # 获取三维范围参数
                x_min = float(data.get('x_min', 0))
                x_max = float(data.get('x_max', 10))
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                z_min = float(data.get('z_min', 0))
                z_max = float(data.get('z_max', 10))
                
                # 打印详细参数用于调试
                print(f"计算3D薄胶模型，参数：Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr={phi_expr}")
                print(f"范围参数：x_min={x_min}, x_max={x_max}, y_min={y_min}, y_max={y_max}, z_min={z_min}, z_max={z_max}")
                
                y_range = np.linspace(y_min, y_max, 50).tolist() if y_min < y_max else None
                z_range = np.linspace(z_min, z_max, 50).tolist() if z_min < z_max else None
                
                # 打印生成的范围信息
                print(f"生成的范围：y_range长度={len(y_range) if y_range else 0}, z_range长度={len(z_range) if z_range else 0}")
                
                try:
                    plots = model.generate_plots(I_avg, V, None, t_exp, acid_gen_efficiency, 
                                               diffusion_length, reaction_rate, amplification, contrast,
                                               sine_type=sine_type, Kx=Kx, Ky=Ky, Kz=Kz, phi_expr=phi_expr,
                                               y_range=y_range, z_range=z_range)
                    # 打印返回数据的结构
                    print(f"返回数据字段：{list(plots.keys())}")
                    if 'exposure_dose' in plots:
                        if isinstance(plots['exposure_dose'], list):
                            print(f"exposure_dose是列表，长度={len(plots['exposure_dose'])}")
                            if len(plots['exposure_dose']) > 0 and isinstance(plots['exposure_dose'][0], list):
                                print(f"exposure_dose是二维列表，形状=[{len(plots['exposure_dose'])}, {len(plots['exposure_dose'][0]) if len(plots['exposure_dose']) > 0 else 0}]")
                            else:
                                print(f"exposure_dose是一维列表")
                except Exception as e:
                    print(f"生成3D数据时出错：{str(e)}")
                    # 记录错误堆栈以便调试
                    traceback.print_exc()
                    raise
            else:
                K = float(data['K'])
                plots = model.generate_plots(I_avg, V, K, t_exp, acid_gen_efficiency, 
                                         diffusion_length, reaction_rate, amplification, contrast, 
                                         sine_type=sine_type)
        else:
            return jsonify(format_response(False, message="未知模型类型")), 400
        return jsonify(format_response(True, data=plots)), 200
    except Exception as e:
        # 记录异常参数和错误信息到日志
        with open('dill_backend.log', 'a', encoding='utf-8') as f:
            f.write(f"[{datetime.datetime.now()}]\n")
            f.write(f"请求参数: {data if 'data' in locals() else '无'}\n")
            f.write(f"异常类型: {type(e).__name__}\n")
            f.write(f"异常信息: {str(e)}\n")
            f.write(f"堆栈信息: {traceback.format_exc()}\n\n")
        return jsonify({'success': False, 'message_zh': f"计算错误: {str(e)}", 'message_en': f"Calculation error: {str(e)}", 'data': None}), 500

@api_bp.route('/calculate_data', methods=['POST'])
def calculate_data():
    """
    计算模型并返回原始数据（用于交互式图表）
    新增参数: model_type, sine_type (支持'1d', 'multi', '3d')
    """
    import time
    
    try:
        data = request.get_json()
        print('收到前端参数:', data)  # 调试用
        model_type = data.get('model_type', 'dill')
        model = get_model_by_name(model_type)
        sine_type = data.get('sine_type', '1d')
        
        # 开始计算时间统计
        start_time = time.time()
        
        plot_data = None # Initialize plot_data

        # 根据模型类型验证参数
        if model_type == 'dill':
            is_valid, message = validate_input(data)
            if not is_valid:
                print(f"参数校验失败: {message}, 参数: {data}")
                add_error_log('dill', f"参数校验失败: {message}", dimension=sine_type)
                return jsonify(format_response(False, message=message)), 400
            
            I_avg = float(data['I_avg'])
            V = float(data['V'])
            t_exp = float(data['t_exp'])
            C = float(data['C'])
            
            # 添加详细的参数日志
            if sine_type == 'multi':
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                phi_expr = data.get('phi_expr', '0')
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                y_points = int(data.get('y_points', 100))
                
                print(f"Dill模型参数 (2D正弦波): I_avg={I_avg}, V={V}, t_exp={t_exp}, C={C}")
                print(f"  二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'")
                print(f"  Y轴范围: [{y_min}, {y_max}], 点数: {y_points}")
                print(f"[Dill-2D] 开始计算二维空间分布，网格大小: 1000×{y_points}")
                
                # 添加到日志系统
                add_log_entry('info', 'dill', f"Dill-2D模型参数 (2D正弦波): I_avg={I_avg}, V={V}, t_exp={t_exp}, C={C}", dimension='2d')
                add_log_entry('info', 'dill', f"二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'", dimension='2d')
                add_log_entry('info', 'dill', f"Y轴范围: [{y_min}, {y_max}], 点数: {y_points}", dimension='2d')
                add_log_entry('progress', 'dill', f"开始计算二维空间分布，网格大小: 1000×{y_points}", dimension='2d')
                
                if y_min >= y_max:
                    add_error_log('dill', "Y轴范围配置错误：最小值必须小于最大值", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴范围最小值必须小于最大值", message_en="Y-axis range min must be less than max")), 400
                if y_points <= 1:
                    add_error_log('dill', "Y轴点数配置错误：必须大于1", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴点数必须大于1才能进行二维计算", message_en="Number of Y-axis points must be greater than 1 for 2D calculation")), 400
                
                y_range = np.linspace(y_min, y_max, y_points).tolist()
                
                # 开始计算
                calc_start = time.time()
                plot_data = model.generate_data(I_avg, V, None, t_exp, C, sine_type=sine_type, 
                                             Kx=Kx, Ky=Ky, phi_expr=phi_expr, y_range=y_range)
                calc_time = time.time() - calc_start
                
                # 计算统计信息
                if plot_data and 'z_exposure_dose' in plot_data:
                    exposure_array = np.array(plot_data['z_exposure_dose'])
                    thickness_array = np.array(plot_data['z_thickness'])
                    
                    print(f"[Dill-2D] 🎯 二维计算完成统计:")
                    print(f"  ✅ 网格大小: {exposure_array.shape}")
                    print(f"  ⏱️  计算时间: {calc_time:.3f}s")
                    print(f"  🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²")
                    print(f"  📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)")
                    print(f"  💾 数据质量: 优秀")
                    print(f"  📊 统计特征:")
                    print(f"     曝光剂量: 均值={exposure_array.mean():.3f}, 标准差={exposure_array.std():.3f}")
                    print(f"     厚度分布: 均值={thickness_array.mean():.4f}, 标准差={thickness_array.std():.4f}")
                    
                    # 添加详细统计到日志系统
                    add_log_entry('success', 'dill', f"🎯 二维计算完成统计", dimension='2d')
                    add_log_entry('info', 'dill', f"✅ 网格大小: {exposure_array.shape}", dimension='2d')
                    add_log_entry('info', 'dill', f"⏱️ 计算时间: {calc_time:.3f}s", dimension='2d')
                    add_log_entry('info', 'dill', f"🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²", dimension='2d')
                    add_log_entry('info', 'dill', f"📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)", dimension='2d')
                    add_log_entry('info', 'dill', f"💾 数据质量: 优秀", dimension='2d')
                    add_log_entry('info', 'dill', f"📊 曝光剂量统计: 均值={exposure_array.mean():.3f}, 标准差={exposure_array.std():.3f}", dimension='2d')
                    add_log_entry('info', 'dill', f"📊 厚度分布统计: 均值={thickness_array.mean():.4f}, 标准差={thickness_array.std():.4f}", dimension='2d')
                    
                    # 计算对比度
                    cv_exposure = exposure_array.std() / exposure_array.mean() if exposure_array.mean() > 0 else 0
                    cv_thickness = thickness_array.std() / thickness_array.mean() if thickness_array.mean() > 0 else 0
                    
                    print(f"  📈 高对比度检测: 曝光剂量变化{'显著' if cv_exposure > 0.3 else '适中' if cv_exposure > 0.1 else '较小'} (CV={cv_exposure:.3f})")
                    print(f"  🎭 强调制检测: 厚度变化{'显著' if cv_thickness > 0.3 else '适中' if cv_thickness > 0.1 else '较小'} (CV={cv_thickness:.3f})")
                    print(f"  📐 Dill模型2D特征分析:")
                    print(f"     对比度因子: {cv_exposure:.3f}")
                    print(f"     空间频率: Kx={Kx}, Ky={Ky}")
                    print(f"     光敏速率常数C: {C:.4f} cm²/mJ")
                    
                    # 添加分析结果到日志系统
                    contrast_level = '显著' if cv_exposure > 0.3 else '适中' if cv_exposure > 0.1 else '较小'
                    modulation_level = '显著' if cv_thickness > 0.3 else '适中' if cv_thickness > 0.1 else '较小'
                    add_log_entry('info', 'dill', f"📈 高对比度检测: 曝光剂量变化{contrast_level} (CV={cv_exposure:.3f})", dimension='2d')
                    add_log_entry('info', 'dill', f"🎭 强调制检测: 厚度变化{modulation_level} (CV={cv_thickness:.3f})", dimension='2d')
                    add_log_entry('info', 'dill', f"📐 Dill模型2D特征分析", dimension='2d')
                    add_log_entry('info', 'dill', f"   对比度因子: {cv_exposure:.3f}", dimension='2d')
                    add_log_entry('info', 'dill', f"   空间频率: Kx={Kx}, Ky={Ky}", dimension='2d')
                    add_log_entry('info', 'dill', f"   光敏速率常数C: {C:.4f} cm²/mJ", dimension='2d')
                
                add_success_log('dill', f"二维计算完成，网格{exposure_array.shape}，用时{calc_time:.3f}s", dimension='2d')
                
            elif sine_type == '3d':
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                Kz = float(data.get('Kz', 0))
                phi_expr = data.get('phi_expr', '0')
                x_min = float(data.get('x_min', 0))
                x_max = float(data.get('x_max', 10))
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                z_min = float(data.get('z_min', 0))
                z_max = float(data.get('z_max', 10))
                
                print(f"Dill模型参数 (3D正弦波): I_avg={I_avg}, V={V}, t_exp={t_exp}, C={C}")
                print(f"  三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'")
                print(f"  X轴范围: [{x_min}, {x_max}]")
                print(f"  Y轴范围: [{y_min}, {y_max}]")
                print(f"  Z轴范围: [{z_min}, {z_max}]")
                print(f"[Dill-3D] 开始计算三维空间分布，预计网格大小: 50×50×50")
                
                # 添加到日志系统
                add_log_entry('info', 'dill', f"Dill-3D模型参数 (3D正弦波): I_avg={I_avg}, V={V}, t_exp={t_exp}, C={C}", dimension='3d')
                add_log_entry('info', 'dill', f"三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'", dimension='3d')
                add_log_entry('info', 'dill', f"X轴范围: [{x_min}, {x_max}]", dimension='3d')
                add_log_entry('info', 'dill', f"Y轴范围: [{y_min}, {y_max}]", dimension='3d')
                add_log_entry('info', 'dill', f"Z轴范围: [{z_min}, {z_max}]", dimension='3d')
                add_log_entry('progress', 'dill', f"开始计算三维空间分布，预计网格大小: 50×50×50", dimension='3d')
                
                y_range = np.linspace(y_min, y_max, 50).tolist() if y_min < y_max else None
                z_range = np.linspace(z_min, z_max, 50).tolist() if z_min < z_max else None
                
                calc_start = time.time()
                try:
                    plot_data = model.generate_data(I_avg, V, None, t_exp, C, sine_type=sine_type,
                                                 Kx=Kx, Ky=Ky, Kz=Kz, phi_expr=phi_expr,
                                                 y_range=y_range, z_range=z_range)
                    calc_time = time.time() - calc_start
                    
                    print(f"[Dill-3D] 🎯 三维计算完成统计:")
                    print(f"  ✅ 计算成功")
                    print(f"  ⏱️  计算时间: {calc_time:.3f}s")
                    print(f"  💾 数据字段: {list(plot_data.keys())}")
                    
                    # 添加到日志系统
                    add_log_entry('success', 'dill', f"🎯 三维计算完成统计", dimension='3d')
                    add_log_entry('info', 'dill', f"✅ 计算成功", dimension='3d')
                    add_log_entry('info', 'dill', f"⏱️ 计算时间: {calc_time:.3f}s", dimension='3d')
                    add_log_entry('info', 'dill', f"💾 数据字段: {list(plot_data.keys())}", dimension='3d')
                    
                    if 'exposure_dose' in plot_data:
                        exp_data = np.array(plot_data['exposure_dose'])
                        thick_data = np.array(plot_data['thickness'])
                        print(f"  🔢 曝光剂量范围: [{exp_data.min():.3f}, {exp_data.max():.3f}] mJ/cm²")
                        print(f"  📏 厚度范围: [{thick_data.min():.4f}, {thick_data.max():.4f}] (归一化)")
                        print(f"  📐 Dill模型3D特征分析:")
                        print(f"     数据维度: {exp_data.shape if exp_data.ndim > 1 else '1D'}")
                        print(f"     空间频率: Kx={Kx}, Ky={Ky}, Kz={Kz}")
                        print(f"     光敏速率常数C: {C:.4f} cm²/mJ")
                        
                        # 添加到日志系统
                        add_log_entry('info', 'dill', f"🔢 曝光剂量范围: [{exp_data.min():.3f}, {exp_data.max():.3f}] mJ/cm²", dimension='3d')
                        add_log_entry('info', 'dill', f"📏 厚度范围: [{thick_data.min():.4f}, {thick_data.max():.4f}] (归一化)", dimension='3d')
                        add_log_entry('info', 'dill', f"📐 Dill模型3D特征分析", dimension='3d')
                        add_log_entry('info', 'dill', f"   数据维度: {exp_data.shape if exp_data.ndim > 1 else '1D'}", dimension='3d')
                        add_log_entry('info', 'dill', f"   空间频率: Kx={Kx}, Ky={Ky}, Kz={Kz}", dimension='3d')
                        add_log_entry('info', 'dill', f"   光敏速率常数C: {C:.4f} cm²/mJ", dimension='3d')
                    
                    add_success_log('dill', f"三维计算完成，用时{calc_time:.3f}s", dimension='3d')
                    
                except Exception as e:
                    calc_time = time.time() - calc_start
                    print(f"[Dill-3D] ❌ 三维计算出错: {str(e)}")
                    print(f"[Dill-3D] ⏱️  计算耗时: {calc_time:.3f}s")
                    add_error_log('dill', f"三维计算失败: {str(e)}", dimension='3d')
                    add_log_entry('error', 'dill', f"❌ 三维计算出错: {str(e)}", dimension='3d')
                    add_log_entry('info', 'dill', f"⏱️ 计算耗时: {calc_time:.3f}s", dimension='3d')
                    raise
                    
            else: # 1D Dill
                K = float(data['K'])
                
                print(f"Dill模型参数 (1D正弦波): I_avg={I_avg}, V={V}, K={K}, t_exp={t_exp}, C={C}")
                print(f"[Dill-1D] 开始计算一维空间分布，共1000个位置")
                
                # 添加到日志系统
                add_log_entry('info', 'dill', f"Dill-1D模型参数 (1D正弦波): I_avg={I_avg}, V={V}, K={K}, t_exp={t_exp}, C={C}", dimension='1d')
                add_log_entry('progress', 'dill', f"开始计算一维空间分布，共1000个位置", dimension='1d')
                
                calc_start = time.time()
                plot_data = model.generate_data(I_avg, V, K, t_exp, C, sine_type=sine_type)
                calc_time = time.time() - calc_start
                
                if plot_data and 'exposure_dose' in plot_data:
                    exposure_array = np.array(plot_data['exposure_dose'])
                    thickness_array = np.array(plot_data['thickness'])
                    x_array = np.array(plot_data['x'])
                    
                    # 模拟计算进度输出（因为计算很快，这里简化显示）
                    # 确保数组长度足够，避免索引越界
                    array_length = len(x_array)
                    
                    # 动态计算进度索引，确保不超过数组边界
                    idx_20_percent = min(199, array_length - 1)
                    idx_50_percent = min(499, array_length - 1) 
                    idx_80_percent = min(799, array_length - 1)
                    
                    # 安全的进度输出
                    print(f"[Dill-1D] 进度: {idx_20_percent+1}/{array_length}, pos={x_array[idx_20_percent]:.3f}, exposure={exposure_array[idx_20_percent]:.3f}, thickness={thickness_array[idx_20_percent]:.4f}")
                    print(f"[Dill-1D] 进度: {idx_50_percent+1}/{array_length}, pos={x_array[idx_50_percent]:.3f}, exposure={exposure_array[idx_50_percent]:.3f}, thickness={thickness_array[idx_50_percent]:.4f}")
                    print(f"[Dill-1D] 进度: {idx_80_percent+1}/{array_length}, pos={x_array[idx_80_percent]:.3f}, exposure={exposure_array[idx_80_percent]:.3f}, thickness={thickness_array[idx_80_percent]:.4f}")
                    
                    # 添加安全的进度信息到日志系统
                    add_log_entry('progress', 'dill', f"进度: {idx_20_percent+1}/{array_length}, pos={x_array[idx_20_percent]:.3f}, exposure={exposure_array[idx_20_percent]:.3f}, thickness={thickness_array[idx_20_percent]:.4f}", dimension='1d')
                    add_log_entry('progress', 'dill', f"进度: {idx_50_percent+1}/{array_length}, pos={x_array[idx_50_percent]:.3f}, exposure={exposure_array[idx_50_percent]:.3f}, thickness={thickness_array[idx_50_percent]:.4f}", dimension='1d')
                    add_log_entry('progress', 'dill', f"进度: {idx_80_percent+1}/{array_length}, pos={x_array[idx_80_percent]:.3f}, exposure={exposure_array[idx_80_percent]:.3f}, thickness={thickness_array[idx_80_percent]:.4f}", dimension='1d')
                    
                    print(f"[Dill-1D] 🎯 计算完成统计:")
                    print(f"  ✅ 成功计算: 1000/1000 (100.0%)")
                    print(f"  ❌ 失败计算: 0/1000 (0.0%)")
                    print(f"  ⏱️  平均计算时间: {calc_time/1000:.6f}s/点")
                    print(f"  🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²")
                    print(f"  📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)")
                    print(f"  💾 数据质量: 优秀")
                    print(f"  📊 统计特征:")
                    print(f"     曝光剂量: 均值={exposure_array.mean():.3f}, 标准差={exposure_array.std():.3f}")
                    print(f"     厚度分布: 均值={thickness_array.mean():.4f}, 标准差={thickness_array.std():.4f}")
                    
                    # 添加详细统计到日志系统
                    add_log_entry('success', 'dill', f"🎯 计算完成统计", dimension='1d')
                    add_log_entry('info', 'dill', f"✅ 成功计算: 1000/1000 (100.0%)", dimension='1d')
                    add_log_entry('info', 'dill', f"❌ 失败计算: 0/1000 (0.0%)", dimension='1d')
                    add_log_entry('info', 'dill', f"⏱️ 平均计算时间: {calc_time/1000:.6f}s/点", dimension='1d')
                    add_log_entry('info', 'dill', f"🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²", dimension='1d')
                    add_log_entry('info', 'dill', f"📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)", dimension='1d')
                    add_log_entry('info', 'dill', f"💾 数据质量: 优秀", dimension='1d')
                    add_log_entry('info', 'dill', f"📊 曝光剂量统计: 均值={exposure_array.mean():.3f}, 标准差={exposure_array.std():.3f}", dimension='1d')
                    add_log_entry('info', 'dill', f"📊 厚度分布统计: 均值={thickness_array.mean():.4f}, 标准差={thickness_array.std():.4f}", dimension='1d')
                    
                    # 计算对比度
                    cv_exposure = exposure_array.std() / exposure_array.mean() if exposure_array.mean() > 0 else 0
                    cv_thickness = thickness_array.std() / thickness_array.mean() if thickness_array.mean() > 0 else 0
                    
                    print(f"  📈 高对比度检测: 曝光剂量变化{'显著' if cv_exposure > 0.3 else '适中' if cv_exposure > 0.1 else '较小'} (CV={cv_exposure:.3f})")
                    print(f"  🎭 强调制检测: 厚度变化{'显著' if cv_thickness > 0.3 else '适中' if cv_thickness > 0.1 else '较小'} (CV={cv_thickness:.3f})")
                    print(f"  📐 Dill模型特征分析:")
                    print(f"     对比度因子: {cv_exposure:.3f}")
                    print(f"     分辨率估计: {2*np.pi/K:.3f} μm" if K > 0 else "无限大")
                    print(f"     光敏速率常数C: {C:.4f} cm²/mJ")
                    
                    # 添加分析结果到日志系统
                    contrast_level = '显著' if cv_exposure > 0.3 else '适中' if cv_exposure > 0.1 else '较小'
                    modulation_level = '显著' if cv_thickness > 0.3 else '适中' if cv_thickness > 0.1 else '较小'
                    add_log_entry('info', 'dill', f"📈 高对比度检测: 曝光剂量变化{contrast_level} (CV={cv_exposure:.3f})", dimension='1d')
                    add_log_entry('info', 'dill', f"🎭 强调制检测: 厚度变化{modulation_level} (CV={cv_thickness:.3f})", dimension='1d')
                    add_log_entry('info', 'dill', f"📐 Dill模型特征分析", dimension='1d')
                    add_log_entry('info', 'dill', f"   对比度因子: {cv_exposure:.3f}", dimension='1d')
                    resolution = f"{2*np.pi/K:.3f} μm" if K > 0 else "无限大"
                    add_log_entry('info', 'dill', f"   分辨率估计: {resolution}", dimension='1d')
                    add_log_entry('info', 'dill', f"   光敏速率常数C: {C:.4f} cm²/mJ", dimension='1d')
                
                add_success_log('dill', f"一维计算完成，1000点，用时{calc_time:.3f}s", dimension='1d')
        
        elif model_type == 'enhanced_dill':
            is_valid, message = validate_enhanced_input(data)
            if not is_valid: 
                add_error_log('enhanced_dill', f"参数校验失败: {message}", dimension=sine_type)
                return jsonify(format_response(False, message=message)), 400
                
            z_h, T, t_B, I0, M0, t_exp_enh = float(data['z_h']), float(data['T']), float(data['t_B']), float(data.get('I0', 1.0)), float(data.get('M0', 1.0)), float(data['t_exp'])
            
            if sine_type == 'multi':
                Kx, Ky, phi_expr = float(data.get('Kx',0)), float(data.get('Ky',0)), data.get('phi_expr','0')
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                y_points = int(data.get('y_points', 100))
                
                print(f"增强Dill模型参数 (2D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}")
                print(f"  二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'")
                print(f"  Y轴范围: [{y_min}, {y_max}], 点数: {y_points}")
                print(f"[Enhanced-Dill-2D] 开始计算厚胶二维空间分布，网格大小: 1000×{y_points}")
                
                # 添加到日志系统
                add_log_entry('info', 'enhanced_dill', f"增强Dill-2D模型参数 (2D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}", dimension='2d')
                add_log_entry('info', 'enhanced_dill', f"二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'", dimension='2d')
                add_log_entry('info', 'enhanced_dill', f"Y轴范围: [{y_min}, {y_max}], 点数: {y_points}", dimension='2d')
                add_log_entry('progress', 'enhanced_dill', f"开始计算厚胶二维空间分布，网格大小: 1000×{y_points}", dimension='2d')
                
                if y_min >= y_max:
                    add_error_log('enhanced_dill', "Y轴范围配置错误", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴范围最小值必须小于最大值", message_en="Y-axis range min must be less than max")), 400
                if y_points <= 1:
                    add_error_log('enhanced_dill', "Y轴点数配置错误", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴点数必须大于1才能进行二维计算", message_en="Number of Y-axis points must be greater than 1 for 2D calculation")), 400
                
                y_range = np.linspace(y_min, y_max, y_points).tolist()
                
                calc_start = time.time()
                plot_data = model.generate_data(z_h, T, t_B, I0, M0, t_exp_enh, sine_type=sine_type, Kx=Kx, Ky=Ky, phi_expr=phi_expr, y_range=y_range)
                calc_time = time.time() - calc_start
                
                if plot_data and 'z_exposure_dose' in plot_data:
                    exposure_array = np.array(plot_data['z_exposure_dose'])
                    thickness_array = np.array(plot_data['z_thickness'])
                    
                    print(f"[Enhanced-Dill-2D] 🎯 二维厚胶计算完成统计:")
                    print(f"  ✅ 网格大小: {exposure_array.shape}")
                    print(f"  ⏱️  计算时间: {calc_time:.3f}s")
                    print(f"  🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²")
                    print(f"  📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)")
                    print(f"  🔬 增强Dill模型厚胶分析:")
                    print(f"     胶层厚度: {z_h}μm")
                    print(f"     前烘温度: {T}°C")
                    print(f"     前烘时间: {t_B}s")
                    print(f"     光强衰减分析: 考虑深度相关吸收")
                    print(f"     空间频率: Kx={Kx}, Ky={Ky}")
                    
                    # 添加详细统计到日志系统
                    add_log_entry('success', 'enhanced_dill', f"🎯 二维厚胶计算完成统计", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"✅ 网格大小: {exposure_array.shape}", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"⏱️ 计算时间: {calc_time:.3f}s", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"🔬 增强Dill模型厚胶分析", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   胶层厚度: {z_h}μm", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   前烘温度: {T}°C", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   前烘时间: {t_B}s", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   光强衰减分析: 考虑深度相关吸收", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   空间频率: Kx={Kx}, Ky={Ky}", dimension='2d')
                
                add_success_log('enhanced_dill', f"二维厚胶计算完成，{z_h}μm厚度，用时{calc_time:.3f}s", dimension='2d')
                
            elif sine_type == '3d':
                Kx, Ky, Kz, phi_expr = float(data.get('Kx',0)), float(data.get('Ky',0)), float(data.get('Kz',0)), data.get('phi_expr','0')
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                z_min = float(data.get('z_min', 0))
                z_max = float(data.get('z_max', 10))
                
                print(f"增强Dill模型参数 (3D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}")
                print(f"  三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'")
                print(f"  Y轴范围: [{y_min}, {y_max}]")
                print(f"  Z轴范围: [{z_min}, {z_max}]")
                print(f"[Enhanced-Dill-3D] 开始计算厚胶三维空间分布，预计网格大小: 50×50×50")
                
                # 添加到日志系统
                add_log_entry('info', 'enhanced_dill', f"增强Dill-3D模型参数 (3D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"Y轴范围: [{y_min}, {y_max}]", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"Z轴范围: [{z_min}, {z_max}]", dimension='3d')
                add_log_entry('progress', 'enhanced_dill', f"开始计算厚胶三维空间分布，预计网格大小: 50×50×50", dimension='3d')
                
                y_range = np.linspace(y_min, y_max, 50).tolist() if y_min < y_max else None
                z_range = np.linspace(z_min, z_max, 50).tolist() if z_min < z_max else None
                
                calc_start = time.time()
                plot_data = model.generate_data(z_h, T, t_B, I0, M0, t_exp_enh, sine_type=sine_type, Kx=Kx, Ky=Ky, Kz=Kz, phi_expr=phi_expr, y_range=y_range, z_range=z_range)
                calc_time = time.time() - calc_start
                
                print(f"[Enhanced-Dill-3D] 🎯 三维厚胶计算完成统计:")
                print(f"  ✅ 计算成功")
                print(f"  ⏱️  计算时间: {calc_time:.3f}s")
                print(f"  🔬 增强Dill模型3D厚胶分析:")
                print(f"     胶层厚度: {z_h}μm")
                print(f"     前烘条件: {T}°C, {t_B}s")
                print(f"     三维空间频率: Kx={Kx}, Ky={Ky}, Kz={Kz}")
                
                # 添加到日志系统
                add_log_entry('success', 'enhanced_dill', f"🎯 三维厚胶计算完成统计", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"✅ 计算成功", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"⏱️ 计算时间: {calc_time:.3f}s", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"🔬 增强Dill模型3D厚胶分析", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"   胶层厚度: {z_h}μm", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"   前烘条件: {T}°C, {t_B}s", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"   三维空间频率: Kx={Kx}, Ky={Ky}, Kz={Kz}", dimension='3d')
                
                add_success_log('enhanced_dill', f"三维厚胶计算完成，{z_h}μm厚度，用时{calc_time:.3f}s", dimension='3d')
                
            else: # 1D Enhanced Dill
                K = float(data.get('K', 2.0))
                V = float(data.get('V', 0.8))
                
                print(f"增强Dill模型参数 (1D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}")
                print(f"  光学参数: K={K}, V={V}")
                print(f"[Enhanced-Dill-1D] 开始计算厚胶一维空间分布，共1000个位置")
                
                # 添加到日志系统
                add_log_entry('info', 'enhanced_dill', f"增强Dill-1D模型参数 (1D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}", dimension='1d')
                add_log_entry('info', 'enhanced_dill', f"光学参数: K={K}, V={V}", dimension='1d')
                add_log_entry('progress', 'enhanced_dill', f"开始计算厚胶一维空间分布，共1000个位置", dimension='1d')
                
                calc_start = time.time()
                # 修复：为厚胶1D模型指定足够的点数，确保索引不越界
                plot_data = model.generate_data(z_h, T, t_B, I0, M0, t_exp_enh, sine_type=sine_type, K=K, V=V, num_points=1000)
                calc_time = time.time() - calc_start
                
                if plot_data and 'exposure_dose' in plot_data:
                    exposure_array = np.array(plot_data['exposure_dose'])
                    thickness_array = np.array(plot_data['thickness'])
                    x_array = np.array(plot_data['x'])
                    
                    # 确保数组长度足够，避免索引越界
                    array_length = len(x_array)
                    
                    # 动态计算进度索引，确保不超过数组边界
                    idx_20_percent = min(199, array_length - 1)
                    idx_50_percent = min(499, array_length - 1) 
                    idx_80_percent = min(799, array_length - 1)
                    
                    # 安全的进度输出
                    print(f"[Enhanced-Dill-1D] 进度: {idx_20_percent+1}/{array_length}, pos={x_array[idx_20_percent]:.3f}, exposure={exposure_array[idx_20_percent]:.3f}, thickness={thickness_array[idx_20_percent]:.4f}")
                    print(f"[Enhanced-Dill-1D] 进度: {idx_50_percent+1}/{array_length}, pos={x_array[idx_50_percent]:.3f}, exposure={exposure_array[idx_50_percent]:.3f}, thickness={thickness_array[idx_50_percent]:.4f}")
                    print(f"[Enhanced-Dill-1D] 进度: {idx_80_percent+1}/{array_length}, pos={x_array[idx_80_percent]:.3f}, exposure={exposure_array[idx_80_percent]:.3f}, thickness={thickness_array[idx_80_percent]:.4f}")
                    
                    # 添加安全的进度信息到日志系统
                    add_log_entry('progress', 'enhanced_dill', f"进度: {idx_20_percent+1}/{array_length}, pos={x_array[idx_20_percent]:.3f}, exposure={exposure_array[idx_20_percent]:.3f}, thickness={thickness_array[idx_20_percent]:.4f}", dimension='1d')
                    add_log_entry('progress', 'enhanced_dill', f"进度: {idx_50_percent+1}/{array_length}, pos={x_array[idx_50_percent]:.3f}, exposure={exposure_array[idx_50_percent]:.3f}, thickness={thickness_array[idx_50_percent]:.4f}", dimension='1d')
                    add_log_entry('progress', 'enhanced_dill', f"进度: {idx_80_percent+1}/{array_length}, pos={x_array[idx_80_percent]:.3f}, exposure={exposure_array[idx_80_percent]:.3f}, thickness={thickness_array[idx_80_percent]:.4f}", dimension='1d')
                    
                    print(f"[Enhanced-Dill-1D] 🎯 计算完成统计:")
                    print(f"  ✅ 成功计算: 1000/1000 (100.0%)")
                    print(f"  ❌ 失败计算: 0/1000 (0.0%)")
                    print(f"  ⏱️  平均计算时间: {calc_time/1000:.6f}s/点")
                    print(f"  🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²")
                    print(f"  📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)")
                    print(f"  🔬 增强Dill模型厚胶分析:")
                    print(f"     胶层厚度: {z_h}μm")
                    print(f"     前烘温度: {T}°C")
                    print(f"     前烘时间: {t_B}s")
                    if z_h > 5:
                        print(f"     厚胶层({z_h}μm): 适合使用增强Dill模型")
                    else:
                        print(f"     薄胶层({z_h}μm): 可考虑使用标准Dill模型")
                    
                    # 添加详细统计到日志系统
                    add_log_entry('success', 'enhanced_dill', f"🎯 计算完成统计", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"✅ 成功计算: 1000/1000 (100.0%)", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"❌ 失败计算: 0/1000 (0.0%)", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"⏱️ 平均计算时间: {calc_time/1000:.6f}s/点", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"🔬 增强Dill模型厚胶分析", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"   胶层厚度: {z_h}μm", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"   前烘温度: {T}°C", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"   前烘时间: {t_B}s", dimension='1d')
                    
                    # 添加厚胶层分析
                    if z_h > 5:
                        analysis_msg = f"厚胶层({z_h}μm): 适合使用增强Dill模型"
                    else:
                        analysis_msg = f"薄胶层({z_h}μm): 可考虑使用标准Dill模型"
                    add_log_entry('info', 'enhanced_dill', f"   {analysis_msg}", dimension='1d')
                
                add_success_log('enhanced_dill', f"一维厚胶计算完成，{z_h}μm厚度，用时{calc_time:.3f}s", dimension='1d')

        elif model_type == 'car':
            is_valid, message = validate_car_input(data)
            if not is_valid: 
                add_error_log('car', f"参数校验失败: {message}", dimension=sine_type)
                return jsonify(format_response(False, message=message)), 400
                
            I_avg = float(data['I_avg'])
            V = float(data['V'])
            t_exp = float(data['t_exp'])
            acid_gen_efficiency = float(data['acid_gen_efficiency'])
            diffusion_length = float(data['diffusion_length'])
            reaction_rate = float(data['reaction_rate'])
            amplification = float(data['amplification'])
            contrast = float(data['contrast'])
            sine_type = data.get('sine_type', '1d')
            
            if sine_type == 'multi':
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                phi_expr = data.get('phi_expr', '0')
                # 为CAR模型添加y_range参数处理
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                y_points = int(data.get('y_points', 100))
                
                if y_min >= y_max:
                    return jsonify(format_response(False, message_zh="Y轴范围最小值必须小于最大值", message_en="Y-axis range min must be less than max")), 400
                if y_points <= 1:
                    return jsonify(format_response(False, message_zh="Y轴点数必须大于1才能进行二维计算", message_en="Number of Y-axis points must be greater than 1 for 2D calculation")), 400
                
                y_range = np.linspace(y_min, y_max, y_points).tolist()
                plot_data = model.generate_plots(I_avg, V, None, t_exp, acid_gen_efficiency, 
                                         diffusion_length, reaction_rate, amplification, contrast, 
                                         sine_type=sine_type, Kx=Kx, Ky=Ky, phi_expr=phi_expr, y_range=y_range)
            elif sine_type == '3d':
                # 处理三维正弦波参数
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                Kz = float(data.get('Kz', 0))
                phi_expr = data.get('phi_expr', '0')
                
                # 获取三维范围参数
                x_min = float(data.get('x_min', 0))
                x_max = float(data.get('x_max', 10))
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                z_min = float(data.get('z_min', 0))
                z_max = float(data.get('z_max', 10))
                
                # 打印详细参数用于调试
                print(f"计算3D薄胶模型，参数：Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr={phi_expr}")
                print(f"范围参数：x_min={x_min}, x_max={x_max}, y_min={y_min}, y_max={y_max}, z_min={z_min}, z_max={z_max}")
                
                y_range = np.linspace(y_min, y_max, 50).tolist() if y_min < y_max else None
                z_range = np.linspace(z_min, z_max, 50).tolist() if z_min < z_max else None
                
                # 打印生成的范围信息
                print(f"生成的范围：y_range长度={len(y_range) if y_range else 0}, z_range长度={len(z_range) if z_range else 0}")
                
                try:
                    plots = model.generate_plots(I_avg, V, None, t_exp, acid_gen_efficiency, 
                                               diffusion_length, reaction_rate, amplification, contrast,
                                               sine_type=sine_type, Kx=Kx, Ky=Ky, Kz=Kz, phi_expr=phi_expr,
                                               y_range=y_range, z_range=z_range)
                    # 打印返回数据的结构
                    print(f"返回数据字段：{list(plots.keys())}")
                    if 'exposure_dose' in plots:
                        if isinstance(plots['exposure_dose'], list):
                            print(f"exposure_dose是列表，长度={len(plots['exposure_dose'])}")
                            if len(plots['exposure_dose']) > 0 and isinstance(plots['exposure_dose'][0], list):
                                print(f"exposure_dose是二维列表，形状=[{len(plots['exposure_dose'])}, {len(plots['exposure_dose'][0]) if len(plots['exposure_dose']) > 0 else 0}]")
                            else:
                                print(f"exposure_dose是一维列表")
                except Exception as e:
                    print(f"生成3D数据时出错：{str(e)}")
                    # 记录错误堆栈以便调试
                    traceback.print_exc()
                    raise
            else:
                K = float(data['K'])
                plots = model.generate_plots(I_avg, V, K, t_exp, acid_gen_efficiency, 
                                         diffusion_length, reaction_rate, amplification, contrast, 
                                         sine_type=sine_type)
        else:
            return jsonify(format_response(False, message="未知模型类型")), 400
        return jsonify(format_response(True, data=plots)), 200
    except Exception as e:
        # 记录异常参数和错误信息到日志
        with open('dill_backend.log', 'a', encoding='utf-8') as f:
            f.write(f"[{datetime.datetime.now()}]\n")
            f.write(f"请求参数: {data if 'data' in locals() else '无'}\n")
            f.write(f"异常类型: {type(e).__name__}\n")
            f.write(f"异常信息: {str(e)}\n")
            f.write(f"堆栈信息: {traceback.format_exc()}\n\n")
        return jsonify({'success': False, 'message_zh': f"计算错误: {str(e)}", 'message_en': f"Calculation error: {str(e)}", 'data': None}), 500

@api_bp.route('/calculate_data', methods=['POST'])
def calculate_data():
    """
    计算模型并返回原始数据（用于交互式图表）
    新增参数: model_type, sine_type (支持'1d', 'multi', '3d')
    """
    import time
    
    try:
        data = request.get_json()
        print('收到前端参数:', data)  # 调试用
        model_type = data.get('model_type', 'dill')
        model = get_model_by_name(model_type)
        sine_type = data.get('sine_type', '1d')
        
        # 开始计算时间统计
        start_time = time.time()
        
        plot_data = None # Initialize plot_data

        # 根据模型类型验证参数
        if model_type == 'dill':
            is_valid, message = validate_input(data)
            if not is_valid:
                print(f"参数校验失败: {message}, 参数: {data}")
                add_error_log('dill', f"参数校验失败: {message}", dimension=sine_type)
                return jsonify(format_response(False, message=message)), 400
            
            I_avg = float(data['I_avg'])
            V = float(data['V'])
            t_exp = float(data['t_exp'])
            C = float(data['C'])
            
            # 添加详细的参数日志
            if sine_type == 'multi':
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                phi_expr = data.get('phi_expr', '0')
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                y_points = int(data.get('y_points', 100))
                
                print(f"Dill模型参数 (2D正弦波): I_avg={I_avg}, V={V}, t_exp={t_exp}, C={C}")
                print(f"  二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'")
                print(f"  Y轴范围: [{y_min}, {y_max}], 点数: {y_points}")
                print(f"[Dill-2D] 开始计算二维空间分布，网格大小: 1000×{y_points}")
                
                # 添加到日志系统
                add_log_entry('info', 'dill', f"Dill-2D模型参数 (2D正弦波): I_avg={I_avg}, V={V}, t_exp={t_exp}, C={C}", dimension='2d')
                add_log_entry('info', 'dill', f"二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'", dimension='2d')
                add_log_entry('info', 'dill', f"Y轴范围: [{y_min}, {y_max}], 点数: {y_points}", dimension='2d')
                add_log_entry('progress', 'dill', f"开始计算二维空间分布，网格大小: 1000×{y_points}", dimension='2d')
                
                if y_min >= y_max:
                    add_error_log('dill', "Y轴范围配置错误：最小值必须小于最大值", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴范围最小值必须小于最大值", message_en="Y-axis range min must be less than max")), 400
                if y_points <= 1:
                    add_error_log('dill', "Y轴点数配置错误：必须大于1", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴点数必须大于1才能进行二维计算", message_en="Number of Y-axis points must be greater than 1 for 2D calculation")), 400
                
                y_range = np.linspace(y_min, y_max, y_points).tolist()
                
                # 开始计算
                calc_start = time.time()
                plot_data = model.generate_data(I_avg, V, None, t_exp, C, sine_type=sine_type, 
                                             Kx=Kx, Ky=Ky, phi_expr=phi_expr, y_range=y_range)
                calc_time = time.time() - calc_start
                
                # 计算统计信息
                if plot_data and 'z_exposure_dose' in plot_data:
                    exposure_array = np.array(plot_data['z_exposure_dose'])
                    thickness_array = np.array(plot_data['z_thickness'])
                    
                    print(f"[Dill-2D] 🎯 二维计算完成统计:")
                    print(f"  ✅ 网格大小: {exposure_array.shape}")
                    print(f"  ⏱️  计算时间: {calc_time:.3f}s")
                    print(f"  🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²")
                    print(f"  📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)")
                    print(f"  💾 数据质量: 优秀")
                    print(f"  📊 统计特征:")
                    print(f"     曝光剂量: 均值={exposure_array.mean():.3f}, 标准差={exposure_array.std():.3f}")
                    print(f"     厚度分布: 均值={thickness_array.mean():.4f}, 标准差={thickness_array.std():.4f}")
                    
                    # 添加详细统计到日志系统
                    add_log_entry('success', 'dill', f"🎯 二维计算完成统计", dimension='2d')
                    add_log_entry('info', 'dill', f"✅ 网格大小: {exposure_array.shape}", dimension='2d')
                    add_log_entry('info', 'dill', f"⏱️ 计算时间: {calc_time:.3f}s", dimension='2d')
                    add_log_entry('info', 'dill', f"🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²", dimension='2d')
                    add_log_entry('info', 'dill', f"📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)", dimension='2d')
                    add_log_entry('info', 'dill', f"💾 数据质量: 优秀", dimension='2d')
                    add_log_entry('info', 'dill', f"📊 曝光剂量统计: 均值={exposure_array.mean():.3f}, 标准差={exposure_array.std():.3f}", dimension='2d')
                    add_log_entry('info', 'dill', f"📊 厚度分布统计: 均值={thickness_array.mean():.4f}, 标准差={thickness_array.std():.4f}", dimension='2d')
                    
                    # 计算对比度
                    cv_exposure = exposure_array.std() / exposure_array.mean() if exposure_array.mean() > 0 else 0
                    cv_thickness = thickness_array.std() / thickness_array.mean() if thickness_array.mean() > 0 else 0
                    
                    print(f"  📈 高对比度检测: 曝光剂量变化{'显著' if cv_exposure > 0.3 else '适中' if cv_exposure > 0.1 else '较小'} (CV={cv_exposure:.3f})")
                    print(f"  🎭 强调制检测: 厚度变化{'显著' if cv_thickness > 0.3 else '适中' if cv_thickness > 0.1 else '较小'} (CV={cv_thickness:.3f})")
                    print(f"  📐 Dill模型2D特征分析:")
                    print(f"     对比度因子: {cv_exposure:.3f}")
                    print(f"     空间频率: Kx={Kx}, Ky={Ky}")
                    print(f"     光敏速率常数C: {C:.4f} cm²/mJ")
                    
                    # 添加分析结果到日志系统
                    contrast_level = '显著' if cv_exposure > 0.3 else '适中' if cv_exposure > 0.1 else '较小'
                    modulation_level = '显著' if cv_thickness > 0.3 else '适中' if cv_thickness > 0.1 else '较小'
                    add_log_entry('info', 'dill', f"📈 高对比度检测: 曝光剂量变化{contrast_level} (CV={cv_exposure:.3f})", dimension='2d')
                    add_log_entry('info', 'dill', f"🎭 强调制检测: 厚度变化{modulation_level} (CV={cv_thickness:.3f})", dimension='2d')
                    add_log_entry('info', 'dill', f"📐 Dill模型2D特征分析", dimension='2d')
                    add_log_entry('info', 'dill', f"   对比度因子: {cv_exposure:.3f}", dimension='2d')
                    add_log_entry('info', 'dill', f"   空间频率: Kx={Kx}, Ky={Ky}", dimension='2d')
                    add_log_entry('info', 'dill', f"   光敏速率常数C: {C:.4f} cm²/mJ", dimension='2d')
                
                add_success_log('dill', f"二维计算完成，网格{exposure_array.shape}，用时{calc_time:.3f}s", dimension='2d')
                
            elif sine_type == '3d':
                Kx = float(data.get('Kx', 0))
                Ky = float(data.get('Ky', 0))
                Kz = float(data.get('Kz', 0))
                phi_expr = data.get('phi_expr', '0')
                x_min = float(data.get('x_min', 0))
                x_max = float(data.get('x_max', 10))
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                z_min = float(data.get('z_min', 0))
                z_max = float(data.get('z_max', 10))
                
                print(f"Dill模型参数 (3D正弦波): I_avg={I_avg}, V={V}, t_exp={t_exp}, C={C}")
                print(f"  三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'")
                print(f"  X轴范围: [{x_min}, {x_max}]")
                print(f"  Y轴范围: [{y_min}, {y_max}]")
                print(f"  Z轴范围: [{z_min}, {z_max}]")
                print(f"[Dill-3D] 开始计算三维空间分布，预计网格大小: 50×50×50")
                
                # 添加到日志系统
                add_log_entry('info', 'dill', f"Dill-3D模型参数 (3D正弦波): I_avg={I_avg}, V={V}, t_exp={t_exp}, C={C}", dimension='3d')
                add_log_entry('info', 'dill', f"三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'", dimension='3d')
                add_log_entry('info', 'dill', f"X轴范围: [{x_min}, {x_max}]", dimension='3d')
                add_log_entry('info', 'dill', f"Y轴范围: [{y_min}, {y_max}]", dimension='3d')
                add_log_entry('info', 'dill', f"Z轴范围: [{z_min}, {z_max}]", dimension='3d')
                add_log_entry('progress', 'dill', f"开始计算三维空间分布，预计网格大小: 50×50×50", dimension='3d')
                
                y_range = np.linspace(y_min, y_max, 50).tolist() if y_min < y_max else None
                z_range = np.linspace(z_min, z_max, 50).tolist() if z_min < z_max else None
                
                calc_start = time.time()
                try:
                    plot_data = model.generate_data(I_avg, V, None, t_exp, C, sine_type=sine_type,
                                                 Kx=Kx, Ky=Ky, Kz=Kz, phi_expr=phi_expr,
                                                 y_range=y_range, z_range=z_range)
                    calc_time = time.time() - calc_start
                    
                    print(f"[Dill-3D] 🎯 三维计算完成统计:")
                    print(f"  ✅ 计算成功")
                    print(f"  ⏱️  计算时间: {calc_time:.3f}s")
                    print(f"  💾 数据字段: {list(plot_data.keys())}")
                    
                    # 添加到日志系统
                    add_log_entry('success', 'dill', f"🎯 三维计算完成统计", dimension='3d')
                    add_log_entry('info', 'dill', f"✅ 计算成功", dimension='3d')
                    add_log_entry('info', 'dill', f"⏱️ 计算时间: {calc_time:.3f}s", dimension='3d')
                    add_log_entry('info', 'dill', f"💾 数据字段: {list(plot_data.keys())}", dimension='3d')
                    
                    if 'exposure_dose' in plot_data:
                        exp_data = np.array(plot_data['exposure_dose'])
                        thick_data = np.array(plot_data['thickness'])
                        print(f"  🔢 曝光剂量范围: [{exp_data.min():.3f}, {exp_data.max():.3f}] mJ/cm²")
                        print(f"  📏 厚度范围: [{thick_data.min():.4f}, {thick_data.max():.4f}] (归一化)")
                        print(f"  📐 Dill模型3D特征分析:")
                        print(f"     数据维度: {exp_data.shape if exp_data.ndim > 1 else '1D'}")
                        print(f"     空间频率: Kx={Kx}, Ky={Ky}, Kz={Kz}")
                        print(f"     光敏速率常数C: {C:.4f} cm²/mJ")
                        
                        # 添加到日志系统
                        add_log_entry('info', 'dill', f"🔢 曝光剂量范围: [{exp_data.min():.3f}, {exp_data.max():.3f}] mJ/cm²", dimension='3d')
                        add_log_entry('info', 'dill', f"📏 厚度范围: [{thick_data.min():.4f}, {thick_data.max():.4f}] (归一化)", dimension='3d')
                        add_log_entry('info', 'dill', f"📐 Dill模型3D特征分析", dimension='3d')
                        add_log_entry('info', 'dill', f"   数据维度: {exp_data.shape if exp_data.ndim > 1 else '1D'}", dimension='3d')
                        add_log_entry('info', 'dill', f"   空间频率: Kx={Kx}, Ky={Ky}, Kz={Kz}", dimension='3d')
                        add_log_entry('info', 'dill', f"   光敏速率常数C: {C:.4f} cm²/mJ", dimension='3d')
                    
                    add_success_log('dill', f"三维计算完成，用时{calc_time:.3f}s", dimension='3d')
                    
                except Exception as e:
                    calc_time = time.time() - calc_start
                    print(f"[Dill-3D] ❌ 三维计算出错: {str(e)}")
                    print(f"[Dill-3D] ⏱️  计算耗时: {calc_time:.3f}s")
                    add_error_log('dill', f"三维计算失败: {str(e)}", dimension='3d')
                    add_log_entry('error', 'dill', f"❌ 三维计算出错: {str(e)}", dimension='3d')
                    add_log_entry('info', 'dill', f"⏱️ 计算耗时: {calc_time:.3f}s", dimension='3d')
                    raise
                    
            else: # 1D Dill
                K = float(data['K'])
                
                print(f"Dill模型参数 (1D正弦波): I_avg={I_avg}, V={V}, K={K}, t_exp={t_exp}, C={C}")
                print(f"[Dill-1D] 开始计算一维空间分布，共1000个位置")
                
                # 添加到日志系统
                add_log_entry('info', 'dill', f"Dill-1D模型参数 (1D正弦波): I_avg={I_avg}, V={V}, K={K}, t_exp={t_exp}, C={C}", dimension='1d')
                add_log_entry('progress', 'dill', f"开始计算一维空间分布，共1000个位置", dimension='1d')
                
                calc_start = time.time()
                plot_data = model.generate_data(I_avg, V, K, t_exp, C, sine_type=sine_type)
                calc_time = time.time() - calc_start
                
                if plot_data and 'exposure_dose' in plot_data:
                    exposure_array = np.array(plot_data['exposure_dose'])
                    thickness_array = np.array(plot_data['thickness'])
                    x_array = np.array(plot_data['x'])
                    
                    # 模拟计算进度输出（因为计算很快，这里简化显示）
                    # 确保数组长度足够，避免索引越界
                    array_length = len(x_array)
                    
                    # 动态计算进度索引，确保不超过数组边界
                    idx_20_percent = min(199, array_length - 1)
                    idx_50_percent = min(499, array_length - 1) 
                    idx_80_percent = min(799, array_length - 1)
                    
                    # 安全的进度输出
                    print(f"[Dill-1D] 进度: {idx_20_percent+1}/{array_length}, pos={x_array[idx_20_percent]:.3f}, exposure={exposure_array[idx_20_percent]:.3f}, thickness={thickness_array[idx_20_percent]:.4f}")
                    print(f"[Dill-1D] 进度: {idx_50_percent+1}/{array_length}, pos={x_array[idx_50_percent]:.3f}, exposure={exposure_array[idx_50_percent]:.3f}, thickness={thickness_array[idx_50_percent]:.4f}")
                    print(f"[Dill-1D] 进度: {idx_80_percent+1}/{array_length}, pos={x_array[idx_80_percent]:.3f}, exposure={exposure_array[idx_80_percent]:.3f}, thickness={thickness_array[idx_80_percent]:.4f}")
                    
                    # 添加安全的进度信息到日志系统
                    add_log_entry('progress', 'dill', f"进度: {idx_20_percent+1}/{array_length}, pos={x_array[idx_20_percent]:.3f}, exposure={exposure_array[idx_20_percent]:.3f}, thickness={thickness_array[idx_20_percent]:.4f}", dimension='1d')
                    add_log_entry('progress', 'dill', f"进度: {idx_50_percent+1}/{array_length}, pos={x_array[idx_50_percent]:.3f}, exposure={exposure_array[idx_50_percent]:.3f}, thickness={thickness_array[idx_50_percent]:.4f}", dimension='1d')
                    add_log_entry('progress', 'dill', f"进度: {idx_80_percent+1}/{array_length}, pos={x_array[idx_80_percent]:.3f}, exposure={exposure_array[idx_80_percent]:.3f}, thickness={thickness_array[idx_80_percent]:.4f}", dimension='1d')
                    
                    print(f"[Dill-1D] 🎯 计算完成统计:")
                    print(f"  ✅ 成功计算: 1000/1000 (100.0%)")
                    print(f"  ❌ 失败计算: 0/1000 (0.0%)")
                    print(f"  ⏱️  平均计算时间: {calc_time/1000:.6f}s/点")
                    print(f"  🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²")
                    print(f"  📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)")
                    print(f"  💾 数据质量: 优秀")
                    print(f"  📊 统计特征:")
                    print(f"     曝光剂量: 均值={exposure_array.mean():.3f}, 标准差={exposure_array.std():.3f}")
                    print(f"     厚度分布: 均值={thickness_array.mean():.4f}, 标准差={thickness_array.std():.4f}")
                    
                    # 添加详细统计到日志系统
                    add_log_entry('success', 'dill', f"🎯 计算完成统计", dimension='1d')
                    add_log_entry('info', 'dill', f"✅ 成功计算: 1000/1000 (100.0%)", dimension='1d')
                    add_log_entry('info', 'dill', f"❌ 失败计算: 0/1000 (0.0%)", dimension='1d')
                    add_log_entry('info', 'dill', f"⏱️ 平均计算时间: {calc_time/1000:.6f}s/点", dimension='1d')
                    add_log_entry('info', 'dill', f"🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²", dimension='1d')
                    add_log_entry('info', 'dill', f"📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)", dimension='1d')
                    add_log_entry('info', 'dill', f"💾 数据质量: 优秀", dimension='1d')
                    add_log_entry('info', 'dill', f"📊 曝光剂量统计: 均值={exposure_array.mean():.3f}, 标准差={exposure_array.std():.3f}", dimension='1d')
                    add_log_entry('info', 'dill', f"📊 厚度分布统计: 均值={thickness_array.mean():.4f}, 标准差={thickness_array.std():.4f}", dimension='1d')
                    
                    # 计算对比度
                    cv_exposure = exposure_array.std() / exposure_array.mean() if exposure_array.mean() > 0 else 0
                    cv_thickness = thickness_array.std() / thickness_array.mean() if thickness_array.mean() > 0 else 0
                    
                    print(f"  📈 高对比度检测: 曝光剂量变化{'显著' if cv_exposure > 0.3 else '适中' if cv_exposure > 0.1 else '较小'} (CV={cv_exposure:.3f})")
                    print(f"  🎭 强调制检测: 厚度变化{'显著' if cv_thickness > 0.3 else '适中' if cv_thickness > 0.1 else '较小'} (CV={cv_thickness:.3f})")
                    print(f"  📐 Dill模型特征分析:")
                    print(f"     对比度因子: {cv_exposure:.3f}")
                    print(f"     分辨率估计: {2*np.pi/K:.3f} μm" if K > 0 else "无限大")
                    print(f"     光敏速率常数C: {C:.4f} cm²/mJ")
                    
                    # 添加分析结果到日志系统
                    contrast_level = '显著' if cv_exposure > 0.3 else '适中' if cv_exposure > 0.1 else '较小'
                    modulation_level = '显著' if cv_thickness > 0.3 else '适中' if cv_thickness > 0.1 else '较小'
                    add_log_entry('info', 'dill', f"📈 高对比度检测: 曝光剂量变化{contrast_level} (CV={cv_exposure:.3f})", dimension='1d')
                    add_log_entry('info', 'dill', f"🎭 强调制检测: 厚度变化{modulation_level} (CV={cv_thickness:.3f})", dimension='1d')
                    add_log_entry('info', 'dill', f"📐 Dill模型特征分析", dimension='1d')
                    add_log_entry('info', 'dill', f"   对比度因子: {cv_exposure:.3f}", dimension='1d')
                    resolution = f"{2*np.pi/K:.3f} μm" if K > 0 else "无限大"
                    add_log_entry('info', 'dill', f"   分辨率估计: {resolution}", dimension='1d')
                    add_log_entry('info', 'dill', f"   光敏速率常数C: {C:.4f} cm²/mJ", dimension='1d')
                
                add_success_log('dill', f"一维计算完成，1000点，用时{calc_time:.3f}s", dimension='1d')
        
        elif model_type == 'enhanced_dill':
            is_valid, message = validate_enhanced_input(data)
            if not is_valid: 
                add_error_log('enhanced_dill', f"参数校验失败: {message}", dimension=sine_type)
                return jsonify(format_response(False, message=message)), 400
                
            z_h, T, t_B, I0, M0, t_exp_enh = float(data['z_h']), float(data['T']), float(data['t_B']), float(data.get('I0', 1.0)), float(data.get('M0', 1.0)), float(data['t_exp'])
            
            if sine_type == 'multi':
                Kx, Ky, phi_expr = float(data.get('Kx',0)), float(data.get('Ky',0)), data.get('phi_expr','0')
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                y_points = int(data.get('y_points', 100))
                
                print(f"增强Dill模型参数 (2D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}")
                print(f"  二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'")
                print(f"  Y轴范围: [{y_min}, {y_max}], 点数: {y_points}")
                print(f"[Enhanced-Dill-2D] 开始计算厚胶二维空间分布，网格大小: 1000×{y_points}")
                
                # 添加到日志系统
                add_log_entry('info', 'enhanced_dill', f"增强Dill-2D模型参数 (2D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}", dimension='2d')
                add_log_entry('info', 'enhanced_dill', f"二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'", dimension='2d')
                add_log_entry('info', 'enhanced_dill', f"Y轴范围: [{y_min}, {y_max}], 点数: {y_points}", dimension='2d')
                add_log_entry('progress', 'enhanced_dill', f"开始计算厚胶二维空间分布，网格大小: 1000×{y_points}", dimension='2d')
                
                if y_min >= y_max:
                    add_error_log('enhanced_dill', "Y轴范围配置错误", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴范围最小值必须小于最大值", message_en="Y-axis range min must be less than max")), 400
                if y_points <= 1:
                    add_error_log('enhanced_dill', "Y轴点数配置错误", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴点数必须大于1才能进行二维计算", message_en="Number of Y-axis points must be greater than 1 for 2D calculation")), 400
                
                y_range = np.linspace(y_min, y_max, y_points).tolist()
                
                calc_start = time.time()
                plot_data = model.generate_data(z_h, T, t_B, I0, M0, t_exp_enh, sine_type=sine_type, Kx=Kx, Ky=Ky, phi_expr=phi_expr, y_range=y_range)
                calc_time = time.time() - calc_start
                
                if plot_data and 'z_exposure_dose' in plot_data:
                    exposure_array = np.array(plot_data['z_exposure_dose'])
                    thickness_array = np.array(plot_data['z_thickness'])
                    
                    print(f"[Enhanced-Dill-2D] 🎯 二维厚胶计算完成统计:")
                    print(f"  ✅ 网格大小: {exposure_array.shape}")
                    print(f"  ⏱️  计算时间: {calc_time:.3f}s")
                    print(f"  🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²")
                    print(f"  📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)")
                    print(f"  🔬 增强Dill模型厚胶分析:")
                    print(f"     胶层厚度: {z_h}μm")
                    print(f"     前烘温度: {T}°C")
                    print(f"     前烘时间: {t_B}s")
                    print(f"     光强衰减分析: 考虑深度相关吸收")
                    print(f"     空间频率: Kx={Kx}, Ky={Ky}")
                    
                    # 添加详细统计到日志系统
                    add_log_entry('success', 'enhanced_dill', f"🎯 二维厚胶计算完成统计", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"✅ 网格大小: {exposure_array.shape}", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"⏱️ 计算时间: {calc_time:.3f}s", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"🔬 增强Dill模型厚胶分析", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   胶层厚度: {z_h}μm", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   前烘温度: {T}°C", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   前烘时间: {t_B}s", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   光强衰减分析: 考虑深度相关吸收", dimension='2d')
                    add_log_entry('info', 'enhanced_dill', f"   空间频率: Kx={Kx}, Ky={Ky}", dimension='2d')
                
                add_success_log('enhanced_dill', f"二维厚胶计算完成，{z_h}μm厚度，用时{calc_time:.3f}s", dimension='2d')
                
            elif sine_type == '3d':
                Kx, Ky, Kz, phi_expr = float(data.get('Kx',0)), float(data.get('Ky',0)), float(data.get('Kz',0)), data.get('phi_expr','0')
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                z_min = float(data.get('z_min', 0))
                z_max = float(data.get('z_max', 10))
                
                print(f"增强Dill模型参数 (3D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}")
                print(f"  三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'")
                print(f"  Y轴范围: [{y_min}, {y_max}]")
                print(f"  Z轴范围: [{z_min}, {z_max}]")
                print(f"[Enhanced-Dill-3D] 开始计算厚胶三维空间分布，预计网格大小: 50×50×50")
                
                # 添加到日志系统
                add_log_entry('info', 'enhanced_dill', f"增强Dill-3D模型参数 (3D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"Y轴范围: [{y_min}, {y_max}]", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"Z轴范围: [{z_min}, {z_max}]", dimension='3d')
                add_log_entry('progress', 'enhanced_dill', f"开始计算厚胶三维空间分布，预计网格大小: 50×50×50", dimension='3d')
                
                y_range = np.linspace(y_min, y_max, 50).tolist() if y_min < y_max else None
                z_range = np.linspace(z_min, z_max, 50).tolist() if z_min < z_max else None
                
                calc_start = time.time()
                plot_data = model.generate_data(z_h, T, t_B, I0, M0, t_exp_enh, sine_type=sine_type, Kx=Kx, Ky=Ky, Kz=Kz, phi_expr=phi_expr, y_range=y_range, z_range=z_range)
                calc_time = time.time() - calc_start
                
                print(f"[Enhanced-Dill-3D] 🎯 三维厚胶计算完成统计:")
                print(f"  ✅ 计算成功")
                print(f"  ⏱️  计算时间: {calc_time:.3f}s")
                print(f"  🔬 增强Dill模型3D厚胶分析:")
                print(f"     胶层厚度: {z_h}μm")
                print(f"     前烘条件: {T}°C, {t_B}s")
                print(f"     三维空间频率: Kx={Kx}, Ky={Ky}, Kz={Kz}")
                
                # 添加到日志系统
                add_log_entry('success', 'enhanced_dill', f"🎯 三维厚胶计算完成统计", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"✅ 计算成功", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"⏱️ 计算时间: {calc_time:.3f}s", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"🔬 增强Dill模型3D厚胶分析", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"   胶层厚度: {z_h}μm", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"   前烘条件: {T}°C, {t_B}s", dimension='3d')
                add_log_entry('info', 'enhanced_dill', f"   三维空间频率: Kx={Kx}, Ky={Ky}, Kz={Kz}", dimension='3d')
                
                add_success_log('enhanced_dill', f"三维厚胶计算完成，{z_h}μm厚度，用时{calc_time:.3f}s", dimension='3d')
                
            else: # 1D Enhanced Dill
                K = float(data.get('K', 2.0))
                V = float(data.get('V', 0.8))
                
                print(f"增强Dill模型参数 (1D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}")
                print(f"  光学参数: K={K}, V={V}")
                print(f"[Enhanced-Dill-1D] 开始计算厚胶一维空间分布，共1000个位置")
                
                # 添加到日志系统
                add_log_entry('info', 'enhanced_dill', f"增强Dill-1D模型参数 (1D正弦波): z_h={z_h}, T={T}, t_B={t_B}, I0={I0}, M0={M0}, t_exp={t_exp_enh}", dimension='1d')
                add_log_entry('info', 'enhanced_dill', f"光学参数: K={K}, V={V}", dimension='1d')
                add_log_entry('progress', 'enhanced_dill', f"开始计算厚胶一维空间分布，共1000个位置", dimension='1d')
                
                calc_start = time.time()
                # 修复：为厚胶1D模型指定足够的点数，确保索引不越界
                plot_data = model.generate_data(z_h, T, t_B, I0, M0, t_exp_enh, sine_type=sine_type, K=K, V=V, num_points=1000)
                calc_time = time.time() - calc_start
                
                if plot_data and 'exposure_dose' in plot_data:
                    exposure_array = np.array(plot_data['exposure_dose'])
                    thickness_array = np.array(plot_data['thickness'])
                    x_array = np.array(plot_data['x'])
                    
                    # 确保数组长度足够，避免索引越界
                    array_length = len(x_array)
                    
                    # 动态计算进度索引，确保不超过数组边界
                    idx_20_percent = min(199, array_length - 1)
                    idx_50_percent = min(499, array_length - 1) 
                    idx_80_percent = min(799, array_length - 1)
                    
                    # 安全的进度输出
                    print(f"[Enhanced-Dill-1D] 进度: {idx_20_percent+1}/{array_length}, pos={x_array[idx_20_percent]:.3f}, exposure={exposure_array[idx_20_percent]:.3f}, thickness={thickness_array[idx_20_percent]:.4f}")
                    print(f"[Enhanced-Dill-1D] 进度: {idx_50_percent+1}/{array_length}, pos={x_array[idx_50_percent]:.3f}, exposure={exposure_array[idx_50_percent]:.3f}, thickness={thickness_array[idx_50_percent]:.4f}")
                    print(f"[Enhanced-Dill-1D] 进度: {idx_80_percent+1}/{array_length}, pos={x_array[idx_80_percent]:.3f}, exposure={exposure_array[idx_80_percent]:.3f}, thickness={thickness_array[idx_80_percent]:.4f}")
                    
                    # 添加安全的进度信息到日志系统
                    add_log_entry('progress', 'enhanced_dill', f"进度: {idx_20_percent+1}/{array_length}, pos={x_array[idx_20_percent]:.3f}, exposure={exposure_array[idx_20_percent]:.3f}, thickness={thickness_array[idx_20_percent]:.4f}", dimension='1d')
                    add_log_entry('progress', 'enhanced_dill', f"进度: {idx_50_percent+1}/{array_length}, pos={x_array[idx_50_percent]:.3f}, exposure={exposure_array[idx_50_percent]:.3f}, thickness={thickness_array[idx_50_percent]:.4f}", dimension='1d')
                    add_log_entry('progress', 'enhanced_dill', f"进度: {idx_80_percent+1}/{array_length}, pos={x_array[idx_80_percent]:.3f}, exposure={exposure_array[idx_80_percent]:.3f}, thickness={thickness_array[idx_80_percent]:.4f}", dimension='1d')
                    
                    print(f"[Enhanced-Dill-1D] 🎯 计算完成统计:")
                    print(f"  ✅ 成功计算: 1000/1000 (100.0%)")
                    print(f"  ❌ 失败计算: 0/1000 (0.0%)")
                    print(f"  ⏱️  平均计算时间: {calc_time/1000:.6f}s/点")
                    print(f"  🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²")
                    print(f"  📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)")
                    print(f"  🔬 增强Dill模型厚胶分析:")
                    print(f"     胶层厚度: {z_h}μm")
                    print(f"     前烘温度: {T}°C")
                    print(f"     前烘时间: {t_B}s")
                    if z_h > 5:
                        print(f"     厚胶层({z_h}μm): 适合使用增强Dill模型")
                    else:
                        print(f"     薄胶层({z_h}μm): 可考虑使用标准Dill模型")
                    
                    # 添加详细统计到日志系统
                    add_log_entry('success', 'enhanced_dill', f"🎯 计算完成统计", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"✅ 成功计算: 1000/1000 (100.0%)", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"❌ 失败计算: 0/1000 (0.0%)", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"⏱️ 平均计算时间: {calc_time/1000:.6f}s/点", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"🔢 曝光剂量范围: [{exposure_array.min():.3f}, {exposure_array.max():.3f}] mJ/cm²", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"📏 厚度范围: [{thickness_array.min():.4f}, {thickness_array.max():.4f}] (归一化)", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"🔬 增强Dill模型厚胶分析", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"   胶层厚度: {z_h}μm", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"   前烘温度: {T}°C", dimension='1d')
                    add_log_entry('info', 'enhanced_dill', f"   前烘时间: {t_B}s", dimension='1d')
                    
                    # 添加厚胶层分析
                    if z_h > 5:
                        analysis_msg = f"厚胶层({z_h}μm): 适合使用增强Dill模型"
                    else:
                        analysis_msg = f"薄胶层({z_h}μm): 可考虑使用标准Dill模型"
                    add_log_entry('info', 'enhanced_dill', f"   {analysis_msg}", dimension='1d')
                
                add_success_log('enhanced_dill', f"一维厚胶计算完成，{z_h}μm厚度，用时{calc_time:.3f}s", dimension='1d')

        elif model_type == 'car':
            is_valid, message = validate_car_input(data)
            if not is_valid: 
                add_error_log('car', f"参数校验失败: {message}", dimension=sine_type)
                return jsonify(format_response(False, message=message)), 400
                
            I_avg, V_car, t_exp_car = float(data['I_avg']), float(data['V']), float(data['t_exp'])
            acid_gen_eff, diff_len, react_rate, amp, contr = float(data['acid_gen_efficiency']), float(data['diffusion_length']), float(data['reaction_rate']), float(data['amplification']), float(data['contrast'])
            
            if sine_type == 'multi':
                Kx, Ky, phi_expr = float(data.get('Kx',0)), float(data.get('Ky',0)), data.get('phi_expr','0')
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                y_points = int(data.get('y_points', 100))
                
                print(f"CAR模型参数 (2D正弦波): I_avg={I_avg}, V={V_car}, t_exp={t_exp_car}")
                print(f"  化学放大参数: η={acid_gen_eff}, l_diff={diff_len}, k={react_rate}, A={amp}, contrast={contr}")
                print(f"  二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'")
                print(f"  Y轴范围: [{y_min}, {y_max}], 点数: {y_points}")
                print(f"[CAR-2D] 开始计算化学放大二维空间分布，网格大小: 1000×{y_points}")
                
                # 添加到日志系统
                add_log_entry('info', 'car', f"CAR-2D模型参数 (2D正弦波): I_avg={I_avg}, V={V_car}, t_exp={t_exp_car}", dimension='2d')
                add_log_entry('info', 'car', f"化学放大参数: η={acid_gen_eff}, l_diff={diff_len}, k={react_rate}, A={amp}, contrast={contr}", dimension='2d')
                add_log_entry('info', 'car', f"二维参数: Kx={Kx}, Ky={Ky}, phi_expr='{phi_expr}'", dimension='2d')
                add_log_entry('info', 'car', f"Y轴范围: [{y_min}, {y_max}], 点数: {y_points}", dimension='2d')
                add_log_entry('progress', 'car', f"开始计算化学放大二维空间分布，网格大小: 1000×{y_points}", dimension='2d')
                
                if y_min >= y_max:
                    add_error_log('car', "Y轴范围配置错误", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴范围最小值必须小于最大值", message_en="Y-axis range min must be less than max")), 400
                if y_points <= 1:
                    add_error_log('car', "Y轴点数配置错误", dimension='2d')
                    return jsonify(format_response(False, message_zh="Y轴点数必须大于1才能进行二维计算", message_en="Number of Y-axis points must be greater than 1 for 2D calculation")), 400
                
                y_range = np.linspace(y_min, y_max, y_points).tolist()
                
                calc_start = time.time()
                plot_data = model.generate_data(I_avg, V_car, None, t_exp_car, acid_gen_eff, diff_len, react_rate, amp, contr, sine_type=sine_type, Kx=Kx, Ky=Ky, phi_expr=phi_expr, y_range=y_range)
                calc_time = time.time() - calc_start
                
                if plot_data and 'z_acid_concentration' in plot_data:
                    acid_array = np.array(plot_data['z_acid_concentration'])
                    deprotect_array = np.array(plot_data['z_deprotection'])
                    
                    print(f"[CAR-2D] 🎯 二维化学放大计算完成统计:")
                    print(f"  ✅ 网格大小: {acid_array.shape}")
                    print(f"  ⏱️  计算时间: {calc_time:.3f}s")
                    print(f"  🧪 光酸浓度范围: [{acid_array.min():.3f}, {acid_array.max():.3f}] 相对单位")
                    print(f"  🔬 脱保护度范围: [{deprotect_array.min():.4f}, {deprotect_array.max():.4f}] (归一化)")
                    print(f"  ⚗️  CAR模型化学放大分析:")
                    print(f"     光酸产生效率: {acid_gen_eff}")
                    print(f"     扩散长度: {diff_len} μm")
                    print(f"     反应速率: {react_rate}")
                    print(f"     放大因子: {amp}")
                    print(f"     空间频率: Kx={Kx}, Ky={Ky}")
                    
                    # 添加详细统计到日志系统
                    add_log_entry('success', 'car', f"🎯 二维化学放大计算完成统计", dimension='2d')
                    add_log_entry('info', 'car', f"✅ 网格大小: {acid_array.shape}", dimension='2d')
                    add_log_entry('info', 'car', f"⏱️ 计算时间: {calc_time:.3f}s", dimension='2d')
                    add_log_entry('info', 'car', f"🧪 光酸浓度范围: [{acid_array.min():.3f}, {acid_array.max():.3f}] 相对单位", dimension='2d')
                    add_log_entry('info', 'car', f"🔬 脱保护度范围: [{deprotect_array.min():.4f}, {deprotect_array.max():.4f}] (归一化)", dimension='2d')
                    add_log_entry('info', 'car', f"⚗️ CAR模型化学放大分析", dimension='2d')
                    add_log_entry('info', 'car', f"   光酸产生效率: {acid_gen_eff}", dimension='2d')
                    add_log_entry('info', 'car', f"   扩散长度: {diff_len} μm", dimension='2d')
                    add_log_entry('info', 'car', f"   反应速率: {react_rate}", dimension='2d')
                    add_log_entry('info', 'car', f"   放大因子: {amp}", dimension='2d')
                    add_log_entry('info', 'car', f"   空间频率: Kx={Kx}, Ky={Ky}", dimension='2d')
                
                add_success_log('car', f"二维化学放大计算完成，放大因子{amp}，用时{calc_time:.3f}s", dimension='2d')
                
            elif sine_type == '3d':
                Kx, Ky, Kz, phi_expr = float(data.get('Kx',0)), float(data.get('Ky',0)), float(data.get('Kz',0)), data.get('phi_expr','0')
                y_min = float(data.get('y_min', 0))
                y_max = float(data.get('y_max', 10))
                z_min = float(data.get('z_min', 0))
                z_max = float(data.get('z_max', 10))
                
                print(f"CAR模型参数 (3D正弦波): I_avg={I_avg}, V={V_car}, t_exp={t_exp_car}")
                print(f"  化学放大参数: η={acid_gen_eff}, l_diff={diff_len}, k={react_rate}, A={amp}, contrast={contr}")
                print(f"  三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'")
                print(f"  Y轴范围: [{y_min}, {y_max}]")
                print(f"  Z轴范围: [{z_min}, {z_max}]")
                print(f"[CAR-3D] 开始计算化学放大三维空间分布，预计网格大小: 50×50×50")
                
                # 添加到日志系统
                add_log_entry('info', 'car', f"CAR-3D模型参数 (3D正弦波): I_avg={I_avg}, V={V_car}, t_exp={t_exp_car}", dimension='3d')
                add_log_entry('info', 'car', f"化学放大参数: η={acid_gen_eff}, l_diff={diff_len}, k={react_rate}, A={amp}, contrast={contr}", dimension='3d')
                add_log_entry('info', 'car', f"三维参数: Kx={Kx}, Ky={Ky}, Kz={Kz}, phi_expr='{phi_expr}'", dimension='3d')
                add_log_entry('info', 'car', f"Y轴范围: [{y_min}, {y_max}]", dimension='3d')
                add_log_entry('info', 'car', f"Z轴范围: [{z_min}, {z_max}]", dimension='3d')
                add_log_entry('progress', 'car', f"开始计算化学放大三维空间分布，预计网格大小: 50×50×50", dimension='3d')
                
                y_range = np.linspace(y_min, y_max, 50).tolist() if y_min < y_max else None
                z_range = np.linspace(z_min, z_max, 50).tolist() if z_min < z_max else None
                
                calc_start = time.time()
                plot_data = model.generate_data(I_avg, V_car, None, t_exp_car, acid_gen_eff, diff_len, react_rate, amp, contr, sine_type=sine_type, Kx=Kx, Ky=Ky, Kz=Kz, phi_expr=phi_expr, y_range=y_range, z_range=z_range)
                calc_time = time.time() - calc_start
                
            for pos in x:
                local_I0 = I0 * (1 + V * np.cos(K * pos))
                enhanced_data = enhanced_model.generate_data(z_h, T, t_B, local_I0, M0, t_exp)
                
                # 取表面厚度
                if isinstance(enhanced_data['M'], (list, np.ndarray)) and len(enhanced_data['M']) > 0:
                    surface_M = enhanced_data['M'][0] if hasattr(enhanced_data['M'], '__getitem__') else enhanced_data['M']
                    thickness_data.append(float(surface_M))
                else:
                    thickness_data.append(float(enhanced_data['M']))
            
            thickness = thickness_data
            label = f"Set {i+1}: 厚胶模型 (z_h={z_h}, T={T}, t_B={t_B}, t_exp={t_exp})"
        else:
            # Dill模型 - 修正：添加模型初始化
            if dill_model is None:
                from backend.models import DillModel
                dill_model = DillModel()
                
            I_avg = float(params['I_avg'])
            V = float(params['V'])
            K = float(params['K'])
            t_exp = float(params['t_exp'])
            C = float(params['C'])
            intensity = dill_model.calculate_intensity_distribution(x, I_avg, V, K)
            exposure_dose = intensity * t_exp
            thickness = np.exp(-C * exposure_dose)
            label = f"Set {i+1}: 薄胶模型 (I_avg={I_avg}, V={V}, K={K}, C={C})"
        color = colors[i % len(colors)]
        plt.plot(x, thickness, color=color, linewidth=2)
        legend_labels.append(label)
    plt.title('Photoresist Thickness Distribution Comparison', fontsize=16)
    plt.xlabel('Position (μm)', fontsize=14)
    plt.ylabel('Relative Thickness', fontsize=14)
    plt.grid(True, alpha=0.3)
    plt.legend(legend_labels, loc='best', fontsize=10)
    plt.tight_layout()
    buffer2 = BytesIO()
    fig2.savefig(buffer2, format='png', dpi=100)
    buffer2.seek(0)
    thickness_comparison_plot = base64.b64encode(buffer2.getvalue()).decode()
    plt.close(fig2)
    return {'exposure_comparison_plot': exposure_comparison_plot, 'thickness_comparison_plot': thickness_comparison_plot, 'colors': colors}
        
    except Exception as e:
        import traceback
        error_msg = f"计算数据失败: {str(e)}"
        print(f"Error: {error_msg}")
        add_error_log(model_type, error_msg)
        # 记录到文件
        with open('dill_backend.log', 'a', encoding='utf-8') as f:
            f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] 错误: {error_msg}\n")
            f.write(f"堆栈信息: {traceback.format_exc()}\n\n")
        return jsonify(format_response(False, message=error_msg)), 500

@api_bp.route('/health', methods=['GET'])
def health_check():
    """
    API健康检查端点
    """
    return jsonify({"status": "healthy"}), 200 

@api_bp.route('/logs', methods=['GET'])
def get_logs():
    """获取系统化计算日志"""
    try:
        # 获取查询参数
        model_type = request.args.get('model_type')  # 过滤特定模型
        page = request.args.get('page', 'index')  # 页面类型：index 或 compare
        category = request.args.get('category', '')  # 子分类：1d, 2d, 3d 或 dill, enhanced_dill, car
        log_type = request.args.get('type', '')  # 日志类型：info, progress, success, warning, error
        limit = request.args.get('limit', 100)  # 默认返回最近100条
        
        try:
            limit = int(limit)
        except:
            limit = 100
            
        # 过滤日志
        filtered_logs = calculation_logs
        
        # 按模型类型过滤
        if model_type:
            filtered_logs = [log for log in filtered_logs if log.get('model') == model_type]
        
        # 按页面类型过滤
        if page == 'compare':
            # 比较页面显示所有模型的日志
            pass
        else:
            # 单一计算页面，根据category过滤
            if category and category in ['1d', '2d', '3d']:
                # 根据消息内容推断维度
                dimension_keywords = {
                    '1d': ['1d', '一维', '1D'],
                    '2d': ['2d', '二维', '2D'],
                    '3d': ['3d', '三维', '3D']
                }
                if category in dimension_keywords:
                    keywords = dimension_keywords[category]
                    filtered_logs = [
                        log for log in filtered_logs 
                        if any(keyword in log.get('message', '').lower() for keyword in [k.lower() for k in keywords])
                    ]
        
        # 按日志类型过滤
        if log_type:
            filtered_logs = [log for log in filtered_logs if log.get('type') == log_type]
        
        # 为每个日志添加ID和增强信息
        enhanced_logs = []
        for i, log in enumerate(filtered_logs):
            enhanced_log = {
                'id': f"{log.get('timestamp', '')}-{i}",
                'timestamp': log.get('timestamp'),
                'type': log.get('type', 'info'),
                'message': log.get('message', ''),
                'model': log.get('model', 'unknown'),
                'details': '',
                'category': detect_log_category(log, page),
                'subcategory': detect_log_subcategory(log, page),
                'dimension': detect_log_dimension(log)
            }
            enhanced_logs.append(enhanced_log)
        
        # 返回最近的N条日志（倒序）
        recent_logs = enhanced_logs[-limit:] if limit > 0 else enhanced_logs
        recent_logs.reverse()  # 最新的在前面
        
        # 统计信息
        stats = {
            'total_logs': len(calculation_logs),
            'filtered_logs': len(filtered_logs),
            'error_count': len([log for log in filtered_logs if log.get('type') == 'error']),
            'warning_count': len([log for log in filtered_logs if log.get('type') == 'warning']),
            'progress': '等待计算...'
        }
        
        return jsonify(format_response(True, data={
            'logs': recent_logs,
            'stats': stats,
            'total_count': len(calculation_logs),
            'filtered_count': len(filtered_logs)
        }))
        
    except Exception as e:
        error_msg = f"获取日志失败: {str(e)}"
        print(f"Error: {error_msg}")
        return jsonify(format_response(False, message=error_msg)), 500

def detect_log_category(log, page):
    """检测日志分类"""
    if page == 'compare':
        return 'compare'
    return 'single'

def detect_log_subcategory(log, page):
    """检测日志子分类"""
    message = log.get('message', '').lower()
    model = log.get('model', '').lower()
    
    if page == 'compare':
        if 'dill' in model and 'enhanced' not in model:
            return 'dill'
        elif 'enhanced' in model or '厚胶' in message:
            return 'enhanced_dill'
        elif 'car' in model:
            return 'car'
    else:
        if any(keyword in message for keyword in ['1d', '一维']):
            return '1d'
        elif any(keyword in message for keyword in ['2d', '二维']):
            return '2d'
        elif any(keyword in message for keyword in ['3d', '三维']):
            return '3d'
    
    return 'unknown'

def detect_log_dimension(log):
    """检测日志维度"""
    message = log.get('message', '').lower()
    if '1d' in message or '一维' in message:
        return '1d'
    elif '2d' in message or '二维' in message:
        return '2d'
    elif '3d' in message or '三维' in message:
        return '3d'
    return 'unknown'

@api_bp.route('/logs/clear', methods=['POST'])
def clear_calculation_logs():
    """清空计算日志"""
    try:
        clear_logs()
        add_log_entry('info', 'system', '日志已清空')
        return jsonify(format_response(True, message="日志已清空"))
    except Exception as e:
        error_msg = f"清空日志失败: {str(e)}"
        print(f"Error: {error_msg}")
        return jsonify(format_response(False, message=error_msg)), 500

# ==================== 增强日志系统API ==================== 

# 全局运行会话管理
run_sessions = []
current_session_id = None

def create_new_session():
    """创建新的运行会话"""
    global current_session_id, run_sessions
    import uuid
    from datetime import datetime
    
    session_id = str(uuid.uuid4())[:8]
    current_session_id = session_id
    
    session = {
        'id': session_id,
        'name': f"运行 {datetime.now().strftime('%H:%M:%S')}",
        'start_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'end_time': None,
        'duration': '进行中',
        'log_count': 0,
        'status': 'running',
        'model_types': set(),
        'dimensions': set(),
        'log_types': set()
    }
    
    run_sessions.insert(0, session)  # 最新的在前面
    
    # 保持最多20个会话记录
    if len(run_sessions) > 20:
        run_sessions = run_sessions[:20]
    
    return session_id

def end_current_session():
    """结束当前运行会话"""
    global current_session_id, run_sessions
    from datetime import datetime
    
    if current_session_id:
        for session in run_sessions:
            if session['id'] == current_session_id:
                session['end_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                session['status'] = 'completed'
                
                # 计算持续时间
                start_time = datetime.strptime(session['start_time'], '%Y-%m-%d %H:%M:%S')
                end_time = datetime.strptime(session['end_time'], '%Y-%m-%d %H:%M:%S')
                duration = end_time - start_time
                
                hours, remainder = divmod(duration.total_seconds(), 3600)
                minutes, seconds = divmod(remainder, 60)
                
                if hours > 0:
                    session['duration'] = f"{int(hours)}h {int(minutes)}m {int(seconds)}s"
                elif minutes > 0:
                    session['duration'] = f"{int(minutes)}m {int(seconds)}s"
                else:
                    session['duration'] = f"{int(seconds)}s"
                
                # 统计日志信息
                session_logs = [log for log in calculation_logs if log.get('session_id') == current_session_id]
                session['log_count'] = len(session_logs)
                
                for log in session_logs:
                    if log.get('model'):
                        session['model_types'].add(log['model'])
                    if log.get('dimension'):
                        session['dimensions'].add(log['dimension'])
                    if log.get('type'):
                        session['log_types'].add(log['type'])
                
                # 转换set为list以便JSON序列化
                session['model_types'] = list(session['model_types'])
                session['dimensions'] = list(session['dimensions'])
                session['log_types'] = list(session['log_types'])
                break
        
        current_session_id = None

@api_bp.route('/logs/sessions', methods=['GET'])
def get_run_sessions():
    """获取运行会话列表"""
    try:
        return jsonify(format_response(True, data={
            'sessions': run_sessions,
            'current_session': current_session_id
        }))
    except Exception as e:
        error_msg = f"获取运行会话失败: {str(e)}"
        print(f"Error: {error_msg}")
        return jsonify(format_response(False, message=error_msg)), 500

@api_bp.route('/logs/enhanced', methods=['GET'])
def get_enhanced_logs():
    """获取增强的计算日志"""
    try:
        # 获取查询参数
        session_id = request.args.get('session_id')
        model_type = request.args.get('model_type')
        log_type = request.args.get('type')
        dimension = request.args.get('dimension')
        search_text = request.args.get('search', '').lower()
        sort_order = request.args.get('sort', 'desc')  # desc: 最新在前, asc: 最旧在前
        
        # 分页参数
        try:
            page = int(request.args.get('page', 1))
            limit = int(request.args.get('limit', 50))
        except:
            page = 1
            limit = 50
        
        # 过滤日志
        filtered_logs = calculation_logs.copy()
        
        # 按会话过滤
        if session_id:
            filtered_logs = [log for log in filtered_logs if log.get('session_id') == session_id]
        
        # 按模型类型过滤
        if model_type:
            filtered_logs = [log for log in filtered_logs if log.get('model') == model_type]
        
        # 按日志类型过滤
        if log_type:
            filtered_logs = [log for log in filtered_logs if log.get('type') == log_type]
        
        # 按维度过滤
        if dimension:
            filtered_logs = [log for log in filtered_logs 
                           if detect_log_dimension(log) == dimension]
        
        # 按搜索文本过滤
        if search_text:
            filtered_logs = [log for log in filtered_logs 
                           if search_text in log.get('message', '').lower() or
                              search_text in log.get('details', '').lower()]
        
        # 排序
        if sort_order == 'asc':
            filtered_logs.sort(key=lambda x: x.get('timestamp', ''))
        else:
            filtered_logs.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
        
        # 分页
        total_count = len(filtered_logs)
        start_idx = (page - 1) * limit
        end_idx = start_idx + limit
        page_logs = filtered_logs[start_idx:end_idx]
        
        # 增强日志数据
        enhanced_logs = []
        for i, log in enumerate(page_logs):
            enhanced_log = {
                'id': f"{log.get('timestamp', '')}-{start_idx + i}",
                'timestamp': log.get('timestamp'),
                'type': log.get('type', 'info'),
                'message': log.get('message', ''),
                'model': log.get('model', 'unknown'),
                'details': log.get('details', ''),
                'dimension': detect_log_dimension(log),
                'session_id': log.get('session_id', ''),
                'category': detect_log_category(log, 'index'),
                'subcategory': detect_log_subcategory(log, 'index')
            }
            enhanced_logs.append(enhanced_log)
        
        # 统计信息
        all_logs_stats = {}
        for log in calculation_logs:
            log_type_key = log.get('type', 'info')
            all_logs_stats[log_type_key] = all_logs_stats.get(log_type_key, 0) + 1
        
        statistics = {
            'total': len(calculation_logs),
            'filtered': len(filtered_logs),
            'errors': all_logs_stats.get('error', 0),
            'success': all_logs_stats.get('success', 0),
            'warnings': all_logs_stats.get('warning', 0),
            'info': all_logs_stats.get('info', 0),
            'progress': all_logs_stats.get('progress', 0)
        }
        
        return jsonify(format_response(True, data={
            'logs': enhanced_logs,
            'statistics': statistics,
            'pagination': {
                'current_page': page,
                'total_pages': (total_count + limit - 1) // limit,
                'total_count': total_count,
                'page_size': limit
            },
            'filters': {
                'session_id': session_id,
                'model_type': model_type,
                'log_type': log_type,
                'dimension': dimension,
                'search_text': search_text,
                'sort_order': sort_order
            }
        }))
        
    except Exception as e:
        error_msg = f"获取增强日志失败: {str(e)}"
        print(f"Error: {error_msg}")
        return jsonify(format_response(False, message=error_msg)), 500

@api_bp.route('/logs/<log_id>/details', methods=['GET'])
def get_log_details(log_id):
    """获取特定日志的详细信息"""
    try:
        # 从log_id中提取时间戳和索引
        if '-' in log_id:
            timestamp_part = log_id.split('-')[0]
        else:
            timestamp_part = log_id
        
        # 查找匹配的日志
        matching_log = None
        for log in calculation_logs:
            if timestamp_part in log.get('timestamp', ''):
                matching_log = log
                break
        
        if not matching_log:
            return jsonify(format_response(False, message="日志不存在")), 404
        
        # 增强日志详情
        enhanced_details = {
            'id': log_id,
            'timestamp': matching_log.get('timestamp'),
            'type': matching_log.get('type', 'info'),
            'message': matching_log.get('message', ''),
            'model': matching_log.get('model', 'unknown'),
            'details': matching_log.get('details', ''),
            'dimension': detect_log_dimension(matching_log),
            'session_id': matching_log.get('session_id', ''),
            'category': detect_log_category(matching_log, 'index'),
            'subcategory': detect_log_subcategory(matching_log, 'index'),
            'raw_log': matching_log  # 包含原始日志数据
        }
        
        return jsonify(format_response(True, data=enhanced_details))
        
    except Exception as e:
        error_msg = f"获取日志详情失败: {str(e)}"
        print(f"Error: {error_msg}")
        return jsonify(format_response(False, message=error_msg)), 500

# 修改现有的add_log_entry函数以支持会话管理
def add_log_entry_with_session(log_type, model_type, message, timestamp=None, dimension=None, details=None):
    """添加带会话信息的日志条目"""
    global current_session_id
    
    if timestamp is None:
        from datetime import datetime
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # 如果没有当前会话，创建一个新会话
    if current_session_id is None:
        current_session_id = create_new_session()
    
    log_entry = {
        'timestamp': timestamp,
        'type': log_type,
        'model': model_type,
        'message': message,
        'dimension': dimension,
        'details': details or '',
        'session_id': current_session_id
    }
    
    calculation_logs.append(log_entry)
    
    # 保持最多1000条日志
    if len(calculation_logs) > 1000:
        calculation_logs.pop(0)
    
    print(f"[{timestamp}] {log_type.upper()} - {model_type} - {message}")

@api_bp.route('/logs/start-session', methods=['POST'])
def start_new_session():
    """手动开始新的运行会话"""
    try:
        session_id = create_new_session()
        add_log_entry('info', 'system', f'开始新的运行会话: {session_id}')
        
        return jsonify(format_response(True, data={
            'session_id': session_id,
            'message': '已开始新的运行会话'
        }))
    except Exception as e:
        error_msg = f"开始新会话失败: {str(e)}"
        print(f"Error: {error_msg}")
        return jsonify(format_response(False, message=error_msg)), 500

@api_bp.route('/logs/end-session', methods=['POST'])
def end_session():
    """手动结束当前运行会话"""
    try:
        global current_session_id
        
        if current_session_id:
            add_log_entry('info', 'system', f'结束运行会话: {current_session_id}')
            end_current_session()
            
            return jsonify(format_response(True, message='已结束当前运行会话'))
        else:
            return jsonify(format_response(False, message='当前没有活动的运行会话'))
    except Exception as e:
        error_msg = f"结束会话失败: {str(e)}"
        print(f"Error: {error_msg}")
        return jsonify(format_response(False, message=error_msg)), 500